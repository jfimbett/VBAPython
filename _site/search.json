[
  {
    "objectID": "slides/vba/01-intro-vba.html#welcome",
    "href": "slides/vba/01-intro-vba.html#welcome",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Welcome",
    "text": "Welcome\n\nCourse: Intro to VBA and Python (10 sessions × ~3 h)\nToday: General Introduction\nGoal: Build confidence to automate simple tasks in Excel using VBA"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#what-is-vba",
    "href": "slides/vba/01-intro-vba.html#what-is-vba",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "What is VBA?",
    "text": "What is VBA?\n\nVisual Basic for Applications (VBA) is a programming language embedded inside Office apps (Excel, Word, PowerPoint, Access).\nRuns inside the host application process (Excel), giving access to its Object Model: e.g. Application → Workbooks → Worksheets → Range.\nGreat for automating repetitive tasks, building custom functions and UI (forms, buttons), and integrating with files and data.\nCross‑platform note: VBA exists on Windows and Mac, but some integrations are Windows‑only. Companies use VBA almost exclusively on Windows.\nMac users can still run most VBA code."
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#why-learn-vba-in-2025",
    "href": "slides/vba/01-intro-vba.html#why-learn-vba-in-2025",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Why learn VBA in 2025?",
    "text": "Why learn VBA in 2025?\n\nExcel remains the lingua franca of business.\nQuick wins: automate reports, cleanup, formatting.\nBridges to other tools (Power Query, Python via xlwings, etc.)."
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#macro-security-mindset",
    "href": "slides/vba/01-intro-vba.html#macro-security-mindset",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Macro security mindset",
    "text": "Macro security mindset\n\nA Macro is the common name for some VBA code embedded in an Office document.\nMacros can run code; treat files like executables.\nOnly enable content from trusted sources.\nUse signed macros in corporate environments.\nA signed macro is one that has been digitally signed with a certificate to verify its authenticity.\n\nWindows (Trust Center): File → Options → Trust Center → Trust Center Settings → Macro Settings\nRecommended for learning: “Disable all macros with notification” + add a Trusted Location for your course folder.\nConsider enabling Protected View for files from the internet; unblock via file Properties → Unblock.\nMac (Trust Center): Excel → Preferences → Security & Privacy\nSimilar options: enable with notification; manage access to Visual Basic project if prompted."
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#enable-developer-tab-windows",
    "href": "slides/vba/01-intro-vba.html#enable-developer-tab-windows",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Enable Developer tab (Windows)",
    "text": "Enable Developer tab (Windows)\n\nFile → Options → Customize Ribbon\nUnder Main Tabs, check Developer and click OK"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#enable-developer-tab-mac",
    "href": "slides/vba/01-intro-vba.html#enable-developer-tab-mac",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Enable Developer tab (Mac)",
    "text": "Enable Developer tab (Mac)\n\nExcel → Preferences → Ribbon & Toolbar\nSelect Main Tabs and check Developer\nClick Save; the Developer tab appears"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#recording-a-macro-windows",
    "href": "slides/vba/01-intro-vba.html#recording-a-macro-windows",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Recording a macro (Windows)",
    "text": "Recording a macro (Windows)\n\nDeveloper → Record Macro\nGive it a name, store location (This Workbook/Personal Macro Workbook)\nDo actions; Stop Recording; inspect code in VBE\nUse “Use Relative References” when you want actions relative to the active cell\nNaming: no spaces, start with a letter; use verbs, e.g., FormatHeader\nStorage: This Workbook = ships with file; Personal Macro Workbook = available to all workbooks\nView/Edit quickly: Developer → Macros → select → Edit (opens VBE)"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#recording-a-macro-mac",
    "href": "slides/vba/01-intro-vba.html#recording-a-macro-mac",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Recording a macro (Mac)",
    "text": "Recording a macro (Mac)\n\nDeveloper → Record Macro (similar flow)\nDifferences: some keyboard shortcuts, dialog layouts\nOutcome: generates VBA you can study and tweak\nRelative References also available from the Developer tab\nUse a short keyboard shortcut cautiously (may conflict); consider assigning to a shape/button instead\nStorage locations mirror Windows; Personal Macro Workbook exists on Mac too"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#the-visual-basic-editor-vbe",
    "href": "slides/vba/01-intro-vba.html#the-visual-basic-editor-vbe",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "The Visual Basic Editor (VBE)",
    "text": "The Visual Basic Editor (VBE)\n\nOpen with Alt+F11 (Windows) or Option+F11 (Mac)\nProject Explorer, Properties Window, Code Pane\nModules vs ThisWorkbook vs Sheet objects\nInsert a Module: VBE → Insert → Module (stores your Sub procedures)\nRun code: press F5 in VBE, or assign to a shape/button on the sheet"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#hello-world-vba",
    "href": "slides/vba/01-intro-vba.html#hello-world-vba",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Hello, world (VBA)",
    "text": "Hello, world (VBA)\n\nMacros start with a Sub procedure, and end with End Sub.\nVBA has reserved words (e.g., Sub, Dim, If, Then, End); case-insensitive but prefer standard casing.\n\n Sub HelloWorld()\n     MsgBox \"Hello from VBA!\"\n End Sub\n\nHow to run it: place cursor inside HelloWorld and press F5 (or click Run ▶)\nAssign to a button: Insert → Shapes → pick a shape → right‑click → Assign Macro → choose HelloWorld"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#anatomy-of-a-sub-procedure",
    "href": "slides/vba/01-intro-vba.html#anatomy-of-a-sub-procedure",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Anatomy of a Sub procedure",
    "text": "Anatomy of a Sub procedure\nSub MyTask()\n    ' your steps here\nEnd Sub\n\nSub = a routine you can run\nLives in a Module"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#variables-your-labeled-boxes",
    "href": "slides/vba/01-intro-vba.html#variables-your-labeled-boxes",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Variables: your labeled boxes",
    "text": "Variables: your labeled boxes\nSub Boxes()\n    Dim total As Long\n    total = 42\n    MsgBox total\nEnd Sub\n\nDim declares storage with a name and type"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#data-types-quick-tour",
    "href": "slides/vba/01-intro-vba.html#data-types-quick-tour",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Data types (quick tour)",
    "text": "Data types (quick tour)\n\nInteger, Long, Double, String, Boolean, Date\nVariant (can hold anything; convenient but slower)\nBest practice: be explicit where possible"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#option-explicit-saves-time",
    "href": "slides/vba/01-intro-vba.html#option-explicit-saves-time",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Option Explicit saves time",
    "text": "Option Explicit saves time\nOption Explicit\nSub Safer()\n    Dim count As Long\n    count = 10\n    MsgBox count\nEnd Sub\n\nForces variable declaration → fewer typos, clearer code"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#referencing-cells",
    "href": "slides/vba/01-intro-vba.html#referencing-cells",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Referencing cells",
    "text": "Referencing cells\n\nVBA can access and manipulate Excel cells directly.\nAbsolute reference example uses the Range object.\nRelative reference example uses ActiveCell and Offset.\nActiveCell is the currently selected cell in the active worksheet.\nOffset is used to refer to a cell that is a specific number of rows and columns away from another cell.\n\nSub SetA1()\n    Range(\"A1\").Value = \"Hi\"\nEnd Sub\n\nRange, Cells, Selection\nQualify with Worksheets(“Sheet1”).Range(“A1”) to be precise\nQualify fully when multiple workbooks: Workbooks(\"Book1.xlsx\").Worksheets(\"Sheet1\").Range(\"A1\")\nCells(row, col) uses numbers: Cells(1, 1) is A1; can combine: Range(Cells(1,1), Cells(10,2))\nUseful for loops."
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#selecting-vs-directly-writing",
    "href": "slides/vba/01-intro-vba.html#selecting-vs-directly-writing",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Selecting vs directly writing",
    "text": "Selecting vs directly writing\n\nAvoid Select/Activate when possible; write directly\n\nDo this\nWorksheets(\"Sheet1\").Range(\"A1\").Value = \"Direct write\"\nWith Worksheets(\"Sheet1\")\n    .Range(\"B1\").Value = \"With block\"\n    .Cells(2, 1).Value = 123\nEnd With\nNot this\nWorksheets(\"Sheet1\").Select\nRange(\"A1\").Select\nSelection.Value = \"Indirect write\"\nRange(\"B1\").Select\nActiveCell.Value = \"Indirect with ActiveCell\""
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#ifthen-logic",
    "href": "slides/vba/01-intro-vba.html#ifthen-logic",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "If…Then logic",
    "text": "If…Then logic\nIf Range(\"A1\").Value &gt; 0 Then\n    MsgBox \"Positive\"\nElse\n    MsgBox \"Non‑positive\"\nEnd If\n\nAnalogy: checking a traffic light before crossing"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#loops-do-it-repeatedly",
    "href": "slides/vba/01-intro-vba.html#loops-do-it-repeatedly",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Loops: Do it repeatedly",
    "text": "Loops: Do it repeatedly\n\nYou need to define the variable that controls the loop.\n\nDim i As Long\nFor i = 1 To 10\n    Cells(i, 1).Value = i\nNext i\n\nDim c As Range\nFor Each c In Range(\"A1:A10\")\n    c.Value = c.Value & \"!\" ' The & concatenates strings\nNext c\n\nDim k As Long\nk = 1\nDo While k &lt;= 10\n    Cells(k, 2).Value = k * 2\n    k = k + 1\nLoop\n\nDim tries As Long\ntries = 0\nDo\n    tries = tries + 1\nLoop Until tries &gt;= 10\n\nFor ... Next: use a counter variable for numeric ranges\nFor Each ... Next: iterate items in a collection (Worksheets, Shapes, or cells in a Range)\nDo While/Do Until: loop while/until a condition is satisfied (see next slide)"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#inputbox-and-msgbox",
    "href": "slides/vba/01-intro-vba.html#inputbox-and-msgbox",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "InputBox and MsgBox",
    "text": "InputBox and MsgBox\nDim name As String\nname = InputBox(\"Your name?\")\nMsgBox \"Hi \" & name\n\nSimple UI for quick interactions\n\nAdvanced: prompt for a Range safely\nSub PickRange()\n    Dim rng As Range\n    On Error Resume Next\n    Set rng = Application.InputBox(\"Select a range\", Type:=8)\n    On Error GoTo 0\n    If rng Is Nothing Then\n        MsgBox \"No selection\"\n    Else\n        MsgBox \"You picked \" & rng.Address\n    End If\nEnd Sub"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#recording-vs-writing-by-hand",
    "href": "slides/vba/01-intro-vba.html#recording-vs-writing-by-hand",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Recording vs writing by hand",
    "text": "Recording vs writing by hand\n\nRecorder shows object model usage\nHand‑writing gives cleaner, faster code\nUse both: record → refactor"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#win-vs-mac-differences-overview",
    "href": "slides/vba/01-intro-vba.html#win-vs-mac-differences-overview",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Win vs Mac differences (overview)",
    "text": "Win vs Mac differences (overview)\n\nShortcuts (Alt vs Option), some dialogs differ\nFile system paths differ\nMany object model calls are the same\n\nDetails that matter: - Paths: Windows uses C:\\Users\\...\\file.xlsx; Mac uses /Users/you/file.xlsx; combine with Application.PathSeparator - File dialogs: Application.FileDialog(msoFileDialogFilePicker) works on both, but filters and default folders behave slightly differently - API calls: Windows allows Declare PtrSafe Function to call Win32 APIs; Mac lacks Win32 — avoid OS API calls for portability - Add‑ins: .xlam works both; COM add‑ins are Windows‑only"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#personal-macro-workbook",
    "href": "slides/vba/01-intro-vba.html#personal-macro-workbook",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Personal Macro Workbook",
    "text": "Personal Macro Workbook\n\nStore macros globally\nLives as PERSONAL.XLSB\nGreat for universal utilities\n\nCreate it: Record a macro and choose “Personal Macro Workbook” → Excel creates PERSONAL.XLSB automatically Locations - Windows: %APPDATA%\\Microsoft\\Excel\\XLStart\\PERSONAL.XLSB - Mac: ~/Library/Group Containers/UBF8T346G9.Office/User Content/Startup/Excel/PERSONAL.XLSB Tips - Make a backup before migrating; copy the file to the same XLStart location on another machine - Show/Hide: View → Unhide/Hide (PERSONAL.XLSB)"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#error-handling-basics",
    "href": "slides/vba/01-intro-vba.html#error-handling-basics",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Error handling basics",
    "text": "Error handling basics\nSub DoWork()\n    On Error GoTo CleanUp\n    Dim prevCalc As XlCalculation\n    prevCalc = Application.Calculation\n    Application.ScreenUpdating = False\n    Application.EnableEvents = False\n    Application.Calculation = xlCalculationManual\n\n    ' ... risky code here ...\n\nDone:\n    Application.Calculation = prevCalc\n    Application.EnableEvents = True\n    Application.ScreenUpdating = True\n    Exit Sub\n\nCleanUp:\n    MsgBox \"Error \" & Err.Number & \": \" & Err.Description, vbExclamation, \"DoWork\"\n    Resume Done\nEnd Sub\n\nStart simple; add structure as you grow"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#best-practices-cheatsheet",
    "href": "slides/vba/01-intro-vba.html#best-practices-cheatsheet",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Best practices cheat‑sheet",
    "text": "Best practices cheat‑sheet\n\nOption Explicit\nAvoid Select/Activate\nName ranges; avoid magic coordinates\nComment intent, not the obvious"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#miniexercise-1",
    "href": "slides/vba/01-intro-vba.html#miniexercise-1",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Mini‑exercise 1",
    "text": "Mini‑exercise 1\n\nRecord a macro that formats a header row\nThen rewrite it to avoid Select/Activate\nCompare line count and clarity"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#miniexercise-2",
    "href": "slides/vba/01-intro-vba.html#miniexercise-2",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Mini‑exercise 2",
    "text": "Mini‑exercise 2\n\nWrite a Sub that fills A1:A20 with squares of 1..20\nShow a MsgBox when done"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#reallife-analogy-kitchen-workflow",
    "href": "slides/vba/01-intro-vba.html#reallife-analogy-kitchen-workflow",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Real‑life analogy: kitchen workflow",
    "text": "Real‑life analogy: kitchen workflow\n\nRoutines = recipes, Variables = labeled jars, Loops = repeating steps\nGood labeling and clean counters make cooking faster"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#where-to-find-help",
    "href": "slides/vba/01-intro-vba.html#where-to-find-help",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Where to find help",
    "text": "Where to find help\n\nObject Browser (F2), MSDN docs, community forums\nRead recorded macros and simplify"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#common-pitfalls-vba-newcomers",
    "href": "slides/vba/01-intro-vba.html#common-pitfalls-vba-newcomers",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Common pitfalls (VBA newcomers)",
    "text": "Common pitfalls (VBA newcomers)\n\nRelying on Select/Activate everywhere → fragile\nNot using Option Explicit → typos hide bugs\nHard‑coding sheet names/paths → parameterize"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#keyboard-shortcuts-winmac",
    "href": "slides/vba/01-intro-vba.html#keyboard-shortcuts-winmac",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Keyboard shortcuts (Win/Mac)",
    "text": "Keyboard shortcuts (Win/Mac)\n\nOpen VBE: Alt+F11 (Win), Option+F11 (Mac)\nRun macro: Alt+F8 (Win/Mac)\nStep through: F8 (Win/Mac)"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#object-model-mental-model",
    "href": "slides/vba/01-intro-vba.html#object-model-mental-model",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Object model mental model",
    "text": "Object model mental model\n\nApplication → Workbooks → Worksheets → Range\nThink nested boxes; qualify references from outer to inner"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#little-refactor-challenge",
    "href": "slides/vba/01-intro-vba.html#little-refactor-challenge",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Little refactor challenge",
    "text": "Little refactor challenge\n\nRecord a macro; then: remove Select, add Option Explicit\nUse With blocks and qualified references"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#quick-cheatsheet",
    "href": "slides/vba/01-intro-vba.html#quick-cheatsheet",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Quick cheat‑sheet",
    "text": "Quick cheat‑sheet\n\nRange(“A1”).Value, Cells(r, c).Value\n.CurrentRegion, .UsedRange\nMsgBox, InputBox"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#knowledge-check-quiz",
    "href": "slides/vba/01-intro-vba.html#knowledge-check-quiz",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Knowledge check (quiz)",
    "text": "Knowledge check (quiz)\n\nWhat does Option Explicit do?\nWhy avoid Select/Activate?\nHow do you qualify a Range to a specific sheet?"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#mini-case-study",
    "href": "slides/vba/01-intro-vba.html#mini-case-study",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Mini case study",
    "text": "Mini case study\n\nMonthly report cleanup: record → refactor → parameterize sheet\nAdd error handling and performance toggles"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#resources",
    "href": "slides/vba/01-intro-vba.html#resources",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Resources",
    "text": "Resources\n\nExcel VBA reference (Microsoft Learn)\nOzGrid, MrExcel forums, Stack Overflow\nRead recorded macros and simplify"
  },
  {
    "objectID": "slides/vba/02-vba-platforms-macros.html#agenda",
    "href": "slides/vba/02-vba-platforms-macros.html#agenda",
    "title": "Introduction to VBA and Python",
    "section": "Agenda",
    "text": "Agenda\n\nAccessing macros on Windows and Mac\nDifferences in VBE usage, file paths, dialogs\nRecording, reviewing, and refactoring\nOrganizing modules and utilities"
  },
  {
    "objectID": "slides/vba/02-vba-platforms-macros.html#accessing-macros-windows",
    "href": "slides/vba/02-vba-platforms-macros.html#accessing-macros-windows",
    "title": "VBA Session 2 — Macros, Platforms, and Productivity",
    "section": "Accessing macros (Windows)",
    "text": "Accessing macros (Windows)\n\nDeveloper tab → Macros (Alt+F8)\nAssign macros to buttons, shapes, or shortcuts\nTrust Center settings for macro security"
  },
  {
    "objectID": "slides/vba/02-vba-platforms-macros.html#accessing-macros-mac",
    "href": "slides/vba/02-vba-platforms-macros.html#accessing-macros-mac",
    "title": "VBA Session 2 — Macros, Platforms, and Productivity",
    "section": "Accessing macros (Mac)",
    "text": "Accessing macros (Mac)\n\nDeveloper tab → Macros\nCustomize Ribbon & Toolbar for quick access\nNote: some shortcut keys differ"
  },
  {
    "objectID": "slides/vba/02-vba-platforms-macros.html#macro-storage-locations",
    "href": "slides/vba/02-vba-platforms-macros.html#macro-storage-locations",
    "title": "Introduction to VBA and Python",
    "section": "Macro storage locations",
    "text": "Macro storage locations\n\nThis Workbook vs New Workbook vs Personal Macro Workbook\nPros/cons for sharing vs personal use"
  },
  {
    "objectID": "slides/vba/02-vba-platforms-macros.html#macro-recorder-pitfalls",
    "href": "slides/vba/02-vba-platforms-macros.html#macro-recorder-pitfalls",
    "title": "Introduction to VBA and Python",
    "section": "Macro recorder pitfalls",
    "text": "Macro recorder pitfalls\n\nRecords every click → lots of Select/Activate\nAbsolute selections → fragile\nGood for learning object references"
  },
  {
    "objectID": "slides/vba/02-vba-platforms-macros.html#refactoring-recorded-macros",
    "href": "slides/vba/02-vba-platforms-macros.html#refactoring-recorded-macros",
    "title": "Introduction to VBA and Python",
    "section": "Refactoring recorded macros",
    "text": "Refactoring recorded macros\nBefore:\nRange(\"A1\").Select\nActiveCell.Value = \"Header\"\nAfter:\nRange(\"A1\").Value = \"Header\""
  },
  {
    "objectID": "slides/vba/02-vba-platforms-macros.html#selecting-ranges-robustly",
    "href": "slides/vba/02-vba-platforms-macros.html#selecting-ranges-robustly",
    "title": "Introduction to VBA and Python",
    "section": "Selecting ranges robustly",
    "text": "Selecting ranges robustly\nWith Worksheets(\"Data\")\n    .Range(\"A1\").CurrentRegion.Select 'for exploration only\n    .Range(\"A1\").Value = \"OK\"\nEnd With\n\nPrefer qualified references (.Range) inside With blocks"
  },
  {
    "objectID": "slides/vba/02-vba-platforms-macros.html#named-ranges-and-tables",
    "href": "slides/vba/02-vba-platforms-macros.html#named-ranges-and-tables",
    "title": "Introduction to VBA and Python",
    "section": "Named ranges and Tables",
    "text": "Named ranges and Tables\n\nUse structured references for stability\nTables (ListObjects) are macro‑friendly\n\nActiveSheet.ListObjects(\"Sales\").DataBodyRange.Columns(1).Value = 0"
  },
  {
    "objectID": "slides/vba/02-vba-platforms-macros.html#win-vs-mac-file-paths",
    "href": "slides/vba/02-vba-platforms-macros.html#win-vs-mac-file-paths",
    "title": "Introduction to VBA and Python",
    "section": "Win vs Mac: file paths",
    "text": "Win vs Mac: file paths\n\nWindows: C:...\nMac: /Users/you/Documents/…\nUse Application.OperatingSystem to branch when needed\n\nPublic Function IsMac() As Boolean\n    IsMac = (InStr(Application.OperatingSystem, \"Mac\") &gt; 0)\nEnd Function\n\nIf InStr(Application.OperatingSystem, \"Mac\") &gt; 0 Then\n    ' Mac path logic\nElse\n    ' Windows path logic\nEnd If"
  },
  {
    "objectID": "slides/vba/02-vba-platforms-macros.html#dialog-differences",
    "href": "slides/vba/02-vba-platforms-macros.html#dialog-differences",
    "title": "Introduction to VBA and Python",
    "section": "Dialog differences",
    "text": "Dialog differences\n\nFile pickers, message boxes, and fonts dialogs differ slightly\nAbstract with small helper functions\n\nPublic Function PickFile(Optional title As String = \"Pick a file\") As String\n    Dim fd As FileDialog\n    Set fd = Application.FileDialog(msoFileDialogFilePicker)\n    With fd\n        .Title = title\n        .AllowMultiSelect = False\n        If .Show = -1 Then PickFile = .SelectedItems(1)\n    End With\nEnd Function"
  },
  {
    "objectID": "slides/vba/02-vba-platforms-macros.html#example-save-csv-crossplatform",
    "href": "slides/vba/02-vba-platforms-macros.html#example-save-csv-crossplatform",
    "title": "Introduction to VBA and Python",
    "section": "Example: Save CSV cross‑platform",
    "text": "Example: Save CSV cross‑platform\nSub SaveCsv()\n    Dim path As String\n    path = GetDesktopPath() & Application.PathSeparator & \"out.csv\"\n    ActiveWorkbook.SaveAs Filename:=path, FileFormat:=xlCSVUTF8\nEnd Sub\nPublic Function GetDesktopPath() As String\n    If IsMac() Then\n        GetDesktopPath = Environ$(\"HOME\") & \"/Desktop\"\n    Else\n        GetDesktopPath = Environ$(\"USERPROFILE\") & \"\\Desktop\"\n    End If\nEnd Function"
  },
  {
    "objectID": "slides/vba/02-vba-platforms-macros.html#organizing-modules",
    "href": "slides/vba/02-vba-platforms-macros.html#organizing-modules",
    "title": "Introduction to VBA and Python",
    "section": "Organizing modules",
    "text": "Organizing modules\n\nBaseline folders: Modules/, Forms/, Classes/\nKeep utilities in a separate module (e.g., modUtils)\nOne responsibility per module where possible\n\nRecommended baseline modules - modUtils: paths, OS detection, dialogs, logging - modPerf: performance toggles wrapper - modExport: SaveAs/Export wrappers"
  },
  {
    "objectID": "slides/vba/02-vba-platforms-macros.html#sub-vs-function",
    "href": "slides/vba/02-vba-platforms-macros.html#sub-vs-function",
    "title": "Introduction to VBA and Python",
    "section": "Sub vs Function",
    "text": "Sub vs Function\nFunction Add(a As Double, b As Double) As Double\n    Add = a + b\nEnd Function\n\nSub UseAdd()\n    Range(\"A1\").Value = Add(2, 3)\nEnd Sub\n\nFunction returns a value; Sub performs actions\n\nAlso useful: Optional parameters and ByRef/ByVal\nSub ResizeCol(ByVal col As Long, Optional width As Double = 12#)\n    Worksheets(1).Columns(col).ColumnWidth = width\nEnd Sub"
  },
  {
    "objectID": "slides/vba/02-vba-platforms-macros.html#public-vs-private-scope",
    "href": "slides/vba/02-vba-platforms-macros.html#public-vs-private-scope",
    "title": "Introduction to VBA and Python",
    "section": "Public vs Private scope",
    "text": "Public vs Private scope\nPublic Const AppName As String = \"MyTools\"\nPrivate Sub Helper()\nEnd Sub\n\nLimit visibility to avoid name collisions"
  },
  {
    "objectID": "slides/vba/02-vba-platforms-macros.html#error-handling-patterns",
    "href": "slides/vba/02-vba-platforms-macros.html#error-handling-patterns",
    "title": "Introduction to VBA and Python",
    "section": "Error handling patterns",
    "text": "Error handling patterns\nSub DoWork()\nOn Error GoTo Fail\n    ' ...\n    Exit Sub\nFail:\n    MsgBox \"Error: \" & Err.Number & \" - \" & Err.Description\nEnd Sub\n\nAdd logging to a hidden sheet for audits\n\nSub LogError(context As String)\n    On Error Resume Next\n    With ThisWorkbook.Worksheets(\"Log\")\n        .Cells(.Rows.Count, 1).End(xlUp).Offset(1).Resize(1, 2).Value = Array(Now, context)\n    End With\nEnd Sub"
  },
  {
    "objectID": "slides/vba/02-vba-platforms-macros.html#loop-patterns",
    "href": "slides/vba/02-vba-platforms-macros.html#loop-patterns",
    "title": "Introduction to VBA and Python",
    "section": "Loop patterns",
    "text": "Loop patterns\n\nFor i = 1 To n\nFor Each cell In Range(…)\nDo While condition\n\nPrefer For Each for collections (fewer index mistakes)\nBatching: prefer reading/writing arrays\nDim arr, rng As Range\nSet rng = Range(\"A1:D1000\")\narr = rng.Value ' 2D variant array\n' process arr in memory\nrng.Value = arr"
  },
  {
    "objectID": "slides/vba/02-vba-platforms-macros.html#working-with-sheets-and-workbooks",
    "href": "slides/vba/02-vba-platforms-macros.html#working-with-sheets-and-workbooks",
    "title": "Introduction to VBA and Python",
    "section": "Working with Sheets and Workbooks",
    "text": "Working with Sheets and Workbooks\nDim wb As Workbook\nSet wb = Workbooks.Open(\"C:\\\\path\\\\file.xlsx\")\nwb.Sheets(\"Data\").Range(\"A1\").Value = Now\n\nAlways Set object variables; remember to Close when done"
  },
  {
    "objectID": "slides/vba/02-vba-platforms-macros.html#performance-tips",
    "href": "slides/vba/02-vba-platforms-macros.html#performance-tips",
    "title": "Introduction to VBA and Python",
    "section": "Performance tips",
    "text": "Performance tips\nApplication.ScreenUpdating = False\nApplication.Calculation = xlCalculationManual\n' ... work ...\nApplication.Calculation = xlCalculationAutomatic\nApplication.ScreenUpdating = True\n\nBatch writes; avoid cell‑by‑cell loops when possible\n\nWrapper for safety and readability\nPublic Sub WithPerformance(ByVal taskName As String, ByVal work As String)\n    Dim prevCalc As XlCalculation\n    prevCalc = Application.Calculation\n    Application.ScreenUpdating = False\n    Application.EnableEvents = False\n    Application.Calculation = xlCalculationManual\n    On Error GoTo Clean\n    Application.Run work ' call a Sub by name\nClean:\n    Application.Calculation = prevCalc\n    Application.EnableEvents = True\n    Application.ScreenUpdating = True\n    If Err.Number &lt;&gt; 0 Then LogError taskName & \": \" & Err.Number & \" \" & Err.Description\nEnd Sub"
  },
  {
    "objectID": "slides/vba/02-vba-platforms-macros.html#inputoutput-basics",
    "href": "slides/vba/02-vba-platforms-macros.html#inputoutput-basics",
    "title": "Introduction to VBA and Python",
    "section": "Input/Output basics",
    "text": "Input/Output basics\n\nInputBox, MsgBox, file read/write\nCSV vs XLSX vs XLSB tradeoffs\n\nTrusted Locations tip (Windows) - File → Options → Trust Center → Trust Center Settings → Trusted Locations → add your course folder to reduce prompts"
  },
  {
    "objectID": "slides/vba/02-vba-platforms-macros.html#example-summarize-a-column",
    "href": "slides/vba/02-vba-platforms-macros.html#example-summarize-a-column",
    "title": "Introduction to VBA and Python",
    "section": "Example: Summarize a column",
    "text": "Example: Summarize a column\nFunction SumCol(rng As Range) As Double\n    Dim c As Range, s As Double\n    For Each c In rng\n        If IsNumeric(c.Value) Then s = s + c.Value\n    Next c\n    SumCol = s\nEnd Function\nRefactor idea: use WorksheetFunction\nFunction SumColFast(rng As Range) As Double\n    SumColFast = Application.WorksheetFunction.Sum(rng)\nEnd Function"
  },
  {
    "objectID": "slides/vba/02-vba-platforms-macros.html#assigning-macros-to-shapes",
    "href": "slides/vba/02-vba-platforms-macros.html#assigning-macros-to-shapes",
    "title": "Introduction to VBA and Python",
    "section": "Assigning macros to shapes",
    "text": "Assigning macros to shapes\n\nInsert → Shapes → Right‑click → Assign Macro\nGreat for dashboard buttons"
  },
  {
    "objectID": "slides/vba/02-vba-platforms-macros.html#custom-toolbar-on-macwin",
    "href": "slides/vba/02-vba-platforms-macros.html#custom-toolbar-on-macwin",
    "title": "Introduction to VBA and Python",
    "section": "Custom toolbar on Mac/Win",
    "text": "Custom toolbar on Mac/Win\n\nCreate a quick access button for common macros\nImproves discoverability for non‑technical users"
  },
  {
    "objectID": "slides/vba/02-vba-platforms-macros.html#reallife-analogy-office-assistant",
    "href": "slides/vba/02-vba-platforms-macros.html#reallife-analogy-office-assistant",
    "title": "VBA Session 2 — Macros, Platforms, and Productivity",
    "section": "Real‑life analogy: Office assistant",
    "text": "Real‑life analogy: Office assistant\n\nRecorder = intern writing down your steps\nRefactoring = turning notes into a clean checklist"
  },
  {
    "objectID": "slides/vba/02-vba-platforms-macros.html#exercise-cleanup-report",
    "href": "slides/vba/02-vba-platforms-macros.html#exercise-cleanup-report",
    "title": "Introduction to VBA and Python",
    "section": "Exercise: cleanup report",
    "text": "Exercise: cleanup report\n\nOpen a messy sheet; record cleanup\nRefactor to parameterize sheet/ranges\nAdd error handling and performance guards"
  },
  {
    "objectID": "slides/vba/02-vba-platforms-macros.html#exercise-crossplatform-save",
    "href": "slides/vba/02-vba-platforms-macros.html#exercise-crossplatform-save",
    "title": "Introduction to VBA and Python",
    "section": "Exercise: cross‑platform save",
    "text": "Exercise: cross‑platform save\n\nWrite a macro that saves a CSV differently on Win vs Mac\nTest with a configurable base path"
  },
  {
    "objectID": "slides/vba/02-vba-platforms-macros.html#macro-security-recap",
    "href": "slides/vba/02-vba-platforms-macros.html#macro-security-recap",
    "title": "Introduction to VBA and Python",
    "section": "Macro security recap",
    "text": "Macro security recap\n\nPrefer signed macros for distribution\nEducate users about enabling content"
  },
  {
    "objectID": "slides/vba/02-vba-platforms-macros.html#personal-macro-workbook-tips",
    "href": "slides/vba/02-vba-platforms-macros.html#personal-macro-workbook-tips",
    "title": "Introduction to VBA and Python",
    "section": "Personal Macro Workbook tips",
    "text": "Personal Macro Workbook tips\n\nStore reusable utilities (date stamp, clear filters)\nBackup PERSONAL.XLSB occasionally"
  },
  {
    "objectID": "slides/vba/02-vba-platforms-macros.html#ribbontoolbar-customization",
    "href": "slides/vba/02-vba-platforms-macros.html#ribbontoolbar-customization",
    "title": "Introduction to VBA and Python",
    "section": "Ribbon/Toolbar customization",
    "text": "Ribbon/Toolbar customization\n\nAdd buttons for frequent macros\nImproves adoption for teams"
  },
  {
    "objectID": "slides/vba/02-vba-platforms-macros.html#logging-pattern",
    "href": "slides/vba/02-vba-platforms-macros.html#logging-pattern",
    "title": "Introduction to VBA and Python",
    "section": "Logging pattern",
    "text": "Logging pattern\nSub LogMsg(msg As String)\n    With Worksheets(\"Log\")\n        .Cells(.Rows.Count, 1).End(xlUp).Offset(1, 0).Value = Now & \": \" & msg\n    End With\nEnd Sub"
  },
  {
    "objectID": "slides/vba/02-vba-platforms-macros.html#config-via-hidden-sheet",
    "href": "slides/vba/02-vba-platforms-macros.html#config-via-hidden-sheet",
    "title": "Introduction to VBA and Python",
    "section": "Config via hidden sheet",
    "text": "Config via hidden sheet\n\nStore base paths, sheet names, parameters\nRead once at startup; validate\n\nPublic Function GetCfg(key As String) As String\n    Dim m As Range\n    Set m = Worksheets(\"Config\").Range(\"A:B\").Find(What:=key, LookAt:=xlWhole)\n    If Not m Is Nothing Then GetCfg = m.Offset(0, 1).Value\nEnd Function"
  },
  {
    "objectID": "slides/vba/02-vba-platforms-macros.html#knowledge-check-quiz",
    "href": "slides/vba/02-vba-platforms-macros.html#knowledge-check-quiz",
    "title": "VBA Session 2 — Macros, Platforms, and Productivity",
    "section": "Knowledge check (quiz)",
    "text": "Knowledge check (quiz)\n\nWhere should global utilities live?\nOne reason to avoid the recorder’s output as-is?\nHow to branch code by OS?"
  },
  {
    "objectID": "slides/vba/02-vba-platforms-macros.html#case-study-crossplatform-export",
    "href": "slides/vba/02-vba-platforms-macros.html#case-study-crossplatform-export",
    "title": "Introduction to VBA and Python",
    "section": "Case study: cross‑platform export",
    "text": "Case study: cross‑platform export\n\nRequirement: Export active sheet as CSV to Desktop\nDesign: path helper + SaveAs wrapper + logging"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#agenda",
    "href": "slides/vba/03-vba-programming-basics.html#agenda",
    "title": "VBA Session 3 — Programming Basics",
    "section": "Agenda",
    "text": "Agenda\n\nBuild solid foundations for VBA programming\nVariables, types, functions, loops, conditionals, cell references\nInput/Output patterns and exercises"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#subroutines-tasks-you-can-run",
    "href": "slides/vba/03-vba-programming-basics.html#subroutines-tasks-you-can-run",
    "title": "VBA Session 3 — Programming Basics",
    "section": "Subroutines: tasks you can run",
    "text": "Subroutines: tasks you can run\nSub Greet()\n    MsgBox \"Welcome!\"\nEnd Sub\n\nKeep them short and focused"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#functions-return-a-value",
    "href": "slides/vba/03-vba-programming-basics.html#functions-return-a-value",
    "title": "VBA Session 3 — Programming Basics",
    "section": "Functions: return a value",
    "text": "Functions: return a value\nFunction NetPrice(price As Double, tax As Double) As Double\n    NetPrice = price * (1 + tax)\nEnd Function\n\nCan be used in cells too"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#variables-and-constants",
    "href": "slides/vba/03-vba-programming-basics.html#variables-and-constants",
    "title": "Introduction to VBA and Python",
    "section": "Variables and constants",
    "text": "Variables and constants\nDim qty As Long\nConst TaxRate As Double = 0.16\n\nConstants express business rules clearly"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#types-recap",
    "href": "slides/vba/03-vba-programming-basics.html#types-recap",
    "title": "Introduction to VBA and Python",
    "section": "Types recap",
    "text": "Types recap\n\nNumeric: Integer/Long/Double/Decimal\nText: String; True/False: Boolean; Date\nVariant: flexible but slower"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#arrays",
    "href": "slides/vba/03-vba-programming-basics.html#arrays",
    "title": "Introduction to VBA and Python",
    "section": "Arrays",
    "text": "Arrays\nDim arr(1 To 3) As Long\narr(1) = 10: arr(2) = 20: arr(3) = 30\n\nDynamic arrays with ReDim when needed"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#for-loop",
    "href": "slides/vba/03-vba-programming-basics.html#for-loop",
    "title": "VBA Session 3 — Programming Basics",
    "section": "For loop",
    "text": "For loop\nDim i As Long\nFor i = 1 To 10\n    Cells(i, 1).Value = i\nNext i"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#for-each-loop",
    "href": "slides/vba/03-vba-programming-basics.html#for-each-loop",
    "title": "VBA Session 3 — Programming Basics",
    "section": "For Each loop",
    "text": "For Each loop\nDim c As Range\nFor Each c In Range(\"A1:A10\")\n    c.Value = c.Row\nNext c\n\nSafer for collections"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#whiledo-loops",
    "href": "slides/vba/03-vba-programming-basics.html#whiledo-loops",
    "title": "VBA Session 3 — Programming Basics",
    "section": "While/Do loops",
    "text": "While/Do loops\nDim i As Long: i = 1\nDo While i &lt;= 10\n    Cells(i, 2).Value = i * 2\n    i = i + 1\nLoop"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#if..elseif..else",
    "href": "slides/vba/03-vba-programming-basics.html#if..elseif..else",
    "title": "VBA Session 3 — Programming Basics",
    "section": "If..ElseIf..Else",
    "text": "If..ElseIf..Else\nIf qty = 0 Then\n    MsgBox \"Empty\"\nElseIf qty &lt; 10 Then\n    MsgBox \"Low\"\nElse\n    MsgBox \"OK\"\nEnd If"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#select-case",
    "href": "slides/vba/03-vba-programming-basics.html#select-case",
    "title": "VBA Session 3 — Programming Basics",
    "section": "Select Case",
    "text": "Select Case\nSelect Case UCase$(Range(\"B1\").Value)\nCase \"N\"\n    MsgBox \"North\"\nCase \"S\"\n    MsgBox \"South\"\nCase Else\n    MsgBox \"Other\"\nEnd Select"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#with-blocks-for-clarity",
    "href": "slides/vba/03-vba-programming-basics.html#with-blocks-for-clarity",
    "title": "Introduction to VBA and Python",
    "section": "With blocks for clarity",
    "text": "With blocks for clarity\nWith Worksheets(\"Report\")\n    .Range(\"A1\").Value = \"Title\"\n    .Range(\"A2\").Font.Bold = True\nEnd With\n\nReduces repetition; groups related actions"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#readingwriting-ranges-fast",
    "href": "slides/vba/03-vba-programming-basics.html#readingwriting-ranges-fast",
    "title": "Introduction to VBA and Python",
    "section": "Reading/writing ranges fast",
    "text": "Reading/writing ranges fast\nDim data\nDim rng As Range\nSet rng = Range(\"A1:D1000\")\ndata = rng.Value ' 2D array\n' ... process in memory ...\nrng.Value = data\n\nBetter than cell‑by‑cell loops"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#finding-last-row",
    "href": "slides/vba/03-vba-programming-basics.html#finding-last-row",
    "title": "Introduction to VBA and Python",
    "section": "Finding last row",
    "text": "Finding last row\nDim lastRow As Long\nlastRow = Cells(Rows.Count, 1).End(xlUp).Row\n\nCommon pattern for dynamic ranges"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#interacting-with-files",
    "href": "slides/vba/03-vba-programming-basics.html#interacting-with-files",
    "title": "Introduction to VBA and Python",
    "section": "Interacting with files",
    "text": "Interacting with files\nOpen \"C:\\\\temp\\\\out.txt\" For Output As #1\nPrint #1, \"Hello file\"\nClose #1\n\nPrefer built‑in workbook I/O for Excel formats"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#csv-export",
    "href": "slides/vba/03-vba-programming-basics.html#csv-export",
    "title": "Introduction to VBA and Python",
    "section": "CSV export",
    "text": "CSV export\nActiveSheet.Copy\nActiveWorkbook.SaveAs \"C:\\\\temp\\\\out.csv\", xlCSVUTF8\nActiveWorkbook.Close False"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#basic-error-handling-template",
    "href": "slides/vba/03-vba-programming-basics.html#basic-error-handling-template",
    "title": "Introduction to VBA and Python",
    "section": "Basic error handling template",
    "text": "Basic error handling template\nSub Template()\nOn Error GoTo Fail\n    ' work\n    Exit Sub\nFail:\n    MsgBox Err.Number & \": \" & Err.Description\nEnd Sub\nAdd minimal assertions\nPublic Sub AssertTrue(ByVal cond As Boolean, ByVal msg As String)\n    If Not cond Then Err.Raise vbObjectError + 1000, , msg\nEnd Sub\n\nSub Test_Assert()\n    On Error GoTo Fail\n    AssertTrue 1 + 1 = 2, \"Math broke\"\n    MsgBox \"OK\"\n    Exit Sub\nFail:\n    MsgBox Err.Description\nEnd Sub"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#inputbox-patterns",
    "href": "slides/vba/03-vba-programming-basics.html#inputbox-patterns",
    "title": "Introduction to VBA and Python",
    "section": "InputBox patterns",
    "text": "InputBox patterns\nDim n As Variant\nn = InputBox(\"How many rows?\", \"Input\", 10)\nIf IsNumeric(n) Then Range(\"A1\").Resize(n, 1).Value = 1"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#userdefined-worksheet-functions-udf",
    "href": "slides/vba/03-vba-programming-basics.html#userdefined-worksheet-functions-udf",
    "title": "Introduction to VBA and Python",
    "section": "User‑defined worksheet functions (UDF)",
    "text": "User‑defined worksheet functions (UDF)\nFunction IsPrime(n As Long) As Boolean\n    Dim i As Long\n    If n &lt; 2 Then Exit Function\n    For i = 2 To Sqr(n)\n        If n Mod i = 0 Then Exit Function\n    Next i\n    IsPrime = True\nEnd Function\n\nUse carefully; they recalc often"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#clean-coding-guidelines",
    "href": "slides/vba/03-vba-programming-basics.html#clean-coding-guidelines",
    "title": "Introduction to VBA and Python",
    "section": "Clean coding guidelines",
    "text": "Clean coding guidelines\n\nName procedures VerbNoun (e.g., ExportReport)\nAvoid magic numbers; use Consts\nKeep procedures under ~50 lines when possible"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#exercise-data-cleanup",
    "href": "slides/vba/03-vba-programming-basics.html#exercise-data-cleanup",
    "title": "Introduction to VBA and Python",
    "section": "Exercise: data cleanup",
    "text": "Exercise: data cleanup\n\nTrim spaces, proper case, remove blanks\nWrite helper functions for reuse"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#exercise-summary-table",
    "href": "slides/vba/03-vba-programming-basics.html#exercise-summary-table",
    "title": "Introduction to VBA and Python",
    "section": "Exercise: summary table",
    "text": "Exercise: summary table\n\nCount by category using loops and dictionary\nOutput a clean table to a new sheet"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#reallife-analogy-building-blocks",
    "href": "slides/vba/03-vba-programming-basics.html#reallife-analogy-building-blocks",
    "title": "VBA Session 3 — Programming Basics",
    "section": "Real‑life analogy: building blocks",
    "text": "Real‑life analogy: building blocks\n\nLoops = assembly line, Conditionals = quality checks\nFunctions = mini‑machines that produce a result"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#where-to-go-next",
    "href": "slides/vba/03-vba-programming-basics.html#where-to-go-next",
    "title": "Introduction to VBA and Python",
    "section": "Where to go next",
    "text": "Where to go next\n\nUserForms for UI, Class modules for models\nInterop with Power Query or Python tools"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#wrapup",
    "href": "slides/vba/03-vba-programming-basics.html#wrapup",
    "title": "Introduction to VBA and Python",
    "section": "Wrap‑up",
    "text": "Wrap‑up\n\nSolid grounding to automate real Excel tasks using VBA"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#dictionaries-scripting.dictionary",
    "href": "slides/vba/03-vba-programming-basics.html#dictionaries-scripting.dictionary",
    "title": "Introduction to VBA and Python",
    "section": "Dictionaries (Scripting.Dictionary)",
    "text": "Dictionaries (Scripting.Dictionary)\nDim d As Object: Set d = CreateObject(\"Scripting.Dictionary\")\nd(\"A\") = 1: d(\"B\") = 2\n\nGreat for counting/grouping"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#timer-and-performance",
    "href": "slides/vba/03-vba-programming-basics.html#timer-and-performance",
    "title": "Introduction to VBA and Python",
    "section": "Timer and performance",
    "text": "Timer and performance\nDim t As Double: t = Timer\n' work\nMsgBox \"Secs: \" & Format(Timer - t, \"0.00\")"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#modularization",
    "href": "slides/vba/03-vba-programming-basics.html#modularization",
    "title": "Introduction to VBA and Python",
    "section": "Modularization",
    "text": "Modularization\n\nSmall subs that call each other\nClear inputs/outputs; avoid global state\n\nPattern: one public entrypoint that calls private helpers\nPublic Sub BuildReport()\n    PrepareSheet\n    LoadData\n    FormatReport\nEnd Sub\n\nPrivate Sub PrepareSheet(): End Sub\nPrivate Sub LoadData(): End Sub\nPrivate Sub FormatReport(): End Sub"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#testing-mindset",
    "href": "slides/vba/03-vba-programming-basics.html#testing-mindset",
    "title": "Introduction to VBA and Python",
    "section": "Testing mindset",
    "text": "Testing mindset\n\nCreate a Test sheet; write simple asserts via MsgBox/Debug.Print"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#knowledge-check-quiz",
    "href": "slides/vba/03-vba-programming-basics.html#knowledge-check-quiz",
    "title": "VBA Session 3 — Programming Basics",
    "section": "Knowledge check (quiz)",
    "text": "Knowledge check (quiz)\n\nWhen to use For vs For Each?\nWhy read/write ranges as arrays?\nOne benefit of Select Case over multiple Ifs?"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#next-steps-preview",
    "href": "slides/vba/03-vba-programming-basics.html#next-steps-preview",
    "title": "Introduction to VBA and Python",
    "section": "Next steps preview",
    "text": "Next steps preview"
  },
  {
    "objectID": "slides/python/01-setup-env.html#welcome",
    "href": "slides/python/01-setup-env.html#welcome",
    "title": "Python Session 1 — Setup and Tools",
    "section": "Welcome",
    "text": "Welcome\n\nGoal: get a reliable Python setup for data and apps\nTools: Conda/Miniconda, Python, pip, virtual environments"
  },
  {
    "objectID": "slides/python/01-setup-env.html#why-environments",
    "href": "slides/python/01-setup-env.html#why-environments",
    "title": "Python Session 1 — Setup and Tools",
    "section": "Why environments?",
    "text": "Why environments?\n\nKeep projects isolated → fewer dependency conflicts"
  },
  {
    "objectID": "slides/python/01-setup-env.html#conda-vs-pip-mental-model",
    "href": "slides/python/01-setup-env.html#conda-vs-pip-mental-model",
    "title": "Python Session 1 — Setup and Tools",
    "section": "Conda vs pip (mental model)",
    "text": "Conda vs pip (mental model)\n\nConda = environment + package manager (binaries too)\npip = Python packages from PyPI\nYou can use both together wisely"
  },
  {
    "objectID": "slides/python/01-setup-env.html#miniconda-installation",
    "href": "slides/python/01-setup-env.html#miniconda-installation",
    "title": "Python Session 1 — Setup and Tools",
    "section": "Miniconda installation",
    "text": "Miniconda installation\n\nDownload Miniconda for your OS\nChoose “Just Me”; add to PATH optional (Conda shell init recommended)"
  },
  {
    "objectID": "slides/python/01-setup-env.html#create-an-environment",
    "href": "slides/python/01-setup-env.html#create-an-environment",
    "title": "Python Session 1 — Setup and Tools",
    "section": "Create an environment",
    "text": "Create an environment\nconda create -n course310 python=3.10 -y\nconda activate course310\n\nName it per project; pin a Python version"
  },
  {
    "objectID": "slides/python/01-setup-env.html#install-packages-conda",
    "href": "slides/python/01-setup-env.html#install-packages-conda",
    "title": "Python Session 1 — Setup and Tools",
    "section": "Install packages (Conda)",
    "text": "Install packages (Conda)\nconda install numpy pandas jupyterlab -y\n\nChannels: defaults, conda-forge"
  },
  {
    "objectID": "slides/python/01-setup-env.html#install-packages-pip",
    "href": "slides/python/01-setup-env.html#install-packages-pip",
    "title": "Python Session 1 — Setup and Tools",
    "section": "Install packages (pip)",
    "text": "Install packages (pip)\npip install requests matplotlib\n\nPrefer pip inside an activated env"
  },
  {
    "objectID": "slides/python/01-setup-env.html#mixing-conda-and-pip-safely",
    "href": "slides/python/01-setup-env.html#mixing-conda-and-pip-safely",
    "title": "Python Session 1 — Setup and Tools",
    "section": "Mixing conda and pip safely",
    "text": "Mixing conda and pip safely\n\nPrefer conda for heavy scientific stacks\nUse pip last for PyPI-only packages"
  },
  {
    "objectID": "slides/python/01-setup-env.html#listing-whats-installed",
    "href": "slides/python/01-setup-env.html#listing-whats-installed",
    "title": "Python Session 1 — Setup and Tools",
    "section": "Listing what’s installed",
    "text": "Listing what’s installed\nconda list\npip list"
  },
  {
    "objectID": "slides/python/01-setup-env.html#exporting-environment",
    "href": "slides/python/01-setup-env.html#exporting-environment",
    "title": "Python Session 1 — Setup and Tools",
    "section": "Exporting environment",
    "text": "Exporting environment\nconda env export --no-builds &gt; environment.yml\n\nShare with collaborators"
  },
  {
    "objectID": "slides/python/01-setup-env.html#recreating-environment",
    "href": "slides/python/01-setup-env.html#recreating-environment",
    "title": "Python Session 1 — Setup and Tools",
    "section": "Recreating environment",
    "text": "Recreating environment\nconda env create -f environment.yml"
  },
  {
    "objectID": "slides/python/01-setup-env.html#virtualenv-alt-approach",
    "href": "slides/python/01-setup-env.html#virtualenv-alt-approach",
    "title": "Python Session 1 — Setup and Tools",
    "section": "Virtualenv (alt approach)",
    "text": "Virtualenv (alt approach)\npython -m venv .venv\n.venv\\Scripts\\activate  # Windows\n\nLighter; use pip exclusively"
  },
  {
    "objectID": "slides/python/01-setup-env.html#pipx-for-clis",
    "href": "slides/python/01-setup-env.html#pipx-for-clis",
    "title": "Python Session 1 — Setup and Tools",
    "section": "pipx for CLIs",
    "text": "pipx for CLIs\n\nInstall Python command-line tools in isolation\nE.g., pipx install black"
  },
  {
    "objectID": "slides/python/01-setup-env.html#jupyter-and-vs-code",
    "href": "slides/python/01-setup-env.html#jupyter-and-vs-code",
    "title": "Python Session 1 — Setup and Tools",
    "section": "Jupyter and VS Code",
    "text": "Jupyter and VS Code\n\nUse JupyterLab or VS Code notebooks\nSelect interpreter per workspace"
  },
  {
    "objectID": "slides/python/01-setup-env.html#quarto-intro-for-these-slides",
    "href": "slides/python/01-setup-env.html#quarto-intro-for-these-slides",
    "title": "Python Session 1 — Setup and Tools",
    "section": "Quarto intro (for these slides)",
    "text": "Quarto intro (for these slides)\n\nQuarto renders .qmd → Reveal.js\nWe use root styles.css for branding"
  },
  {
    "objectID": "slides/python/01-setup-env.html#troubleshooting-path",
    "href": "slides/python/01-setup-env.html#troubleshooting-path",
    "title": "Python Session 1 — Setup and Tools",
    "section": "Troubleshooting PATH",
    "text": "Troubleshooting PATH\n\nIf conda not found: re-run “conda init” then restart shell\nIf Python version wrong: check conda env activation"
  },
  {
    "objectID": "slides/python/01-setup-env.html#basic-sanity-check-script",
    "href": "slides/python/01-setup-env.html#basic-sanity-check-script",
    "title": "Python Session 1 — Setup and Tools",
    "section": "Basic sanity check script",
    "text": "Basic sanity check script\nimport sys, numpy, pandas\nprint(sys.version)\nprint(numpy.__version__, pandas.__version__)"
  },
  {
    "objectID": "slides/python/01-setup-env.html#best-practices",
    "href": "slides/python/01-setup-env.html#best-practices",
    "title": "Python Session 1 — Setup and Tools",
    "section": "Best practices",
    "text": "Best practices\n\nOne env per project\nLock dependencies when shipping\nKeep environments small and reproducible"
  },
  {
    "objectID": "slides/python/01-setup-env.html#exercise-1",
    "href": "slides/python/01-setup-env.html#exercise-1",
    "title": "Python Session 1 — Setup and Tools",
    "section": "Exercise 1",
    "text": "Exercise 1\n\nCreate env course310; install numpy, pandas, jupyterlab\nRun jupyter lab and create a notebook"
  },
  {
    "objectID": "slides/python/01-setup-env.html#exercise-2",
    "href": "slides/python/01-setup-env.html#exercise-2",
    "title": "Python Session 1 — Setup and Tools",
    "section": "Exercise 2",
    "text": "Exercise 2\n\nExport environment.yml and recreate it in a new folder"
  },
  {
    "objectID": "slides/python/01-setup-env.html#reallife-analogy",
    "href": "slides/python/01-setup-env.html#reallife-analogy",
    "title": "Python Session 1 — Setup and Tools",
    "section": "Real‑life analogy",
    "text": "Real‑life analogy\n\nEnvironments = separate toolboxes; avoid mixing metric/imperial tools"
  },
  {
    "objectID": "slides/python/01-setup-env.html#security-notes",
    "href": "slides/python/01-setup-env.html#security-notes",
    "title": "Python Session 1 — Setup and Tools",
    "section": "Security notes",
    "text": "Security notes\n\nOnly install from trusted sources\nRead package readme, star ratings"
  },
  {
    "objectID": "slides/python/01-setup-env.html#wrapup",
    "href": "slides/python/01-setup-env.html#wrapup",
    "title": "Python Session 1 — Setup and Tools",
    "section": "Wrap‑up",
    "text": "Wrap‑up\n\nYou can create/activate environments and manage packages\nNext: Python language basics"
  },
  {
    "objectID": "slides/python/01-setup-env.html#conda-forge-channel",
    "href": "slides/python/01-setup-env.html#conda-forge-channel",
    "title": "Python Session 1 — Setup and Tools",
    "section": "Conda-forge channel",
    "text": "Conda-forge channel\nconda config --add channels conda-forge\nconda config --set channel_priority flexible"
  },
  {
    "objectID": "slides/python/01-setup-env.html#pinning-versions",
    "href": "slides/python/01-setup-env.html#pinning-versions",
    "title": "Python Session 1 — Setup and Tools",
    "section": "Pinning versions",
    "text": "Pinning versions\nconda install numpy=2.0 pandas=2.2 -y\n\nImproves reproducibility"
  },
  {
    "objectID": "slides/python/01-setup-env.html#requirements-vs-environment.yml",
    "href": "slides/python/01-setup-env.html#requirements-vs-environment.yml",
    "title": "Python Session 1 — Setup and Tools",
    "section": "Requirements vs environment.yml",
    "text": "Requirements vs environment.yml\n\npip requirements.txt vs conda environment.yml\nChoose one primary spec; document"
  },
  {
    "objectID": "slides/python/01-setup-env.html#clean-up-environments",
    "href": "slides/python/01-setup-env.html#clean-up-environments",
    "title": "Python Session 1 — Setup and Tools",
    "section": "Clean up environments",
    "text": "Clean up environments\nconda env remove -n oldenv"
  },
  {
    "objectID": "slides/python/01-setup-env.html#verify-gpu-packages-if-applicable",
    "href": "slides/python/01-setup-env.html#verify-gpu-packages-if-applicable",
    "title": "Python Session 1 — Setup and Tools",
    "section": "Verify GPU packages (if applicable)",
    "text": "Verify GPU packages (if applicable)\n\nconda search cudatoolkit\nMatch versions with installed drivers"
  },
  {
    "objectID": "slides/python/01-setup-env.html#knowledge-check-quiz",
    "href": "slides/python/01-setup-env.html#knowledge-check-quiz",
    "title": "Python Session 1 — Setup and Tools",
    "section": "Knowledge check (quiz)",
    "text": "Knowledge check (quiz)\n\nWhen to use pip vs conda?\nWhy create per‑project envs?"
  },
  {
    "objectID": "slides/python/01-setup-env.html#tip-.python-version-.envrc",
    "href": "slides/python/01-setup-env.html#tip-.python-version-.envrc",
    "title": "Python Session 1 — Setup and Tools",
    "section": "Tip: .python-version / .envrc",
    "text": "Tip: .python-version / .envrc\n\nTools like direnv/pyenv can auto‑switch environments"
  },
  {
    "objectID": "slides/python/02-python-basics.html#why-python",
    "href": "slides/python/02-python-basics.html#why-python",
    "title": "Python Session 2 — Python Basics",
    "section": "Why Python?",
    "text": "Why Python?\n\nGeneral‑purpose, batteries included, huge ecosystem\nReadable like English; great for rapid prototyping"
  },
  {
    "objectID": "slides/python/02-python-basics.html#running-python",
    "href": "slides/python/02-python-basics.html#running-python",
    "title": "Python Session 2 — Python Basics",
    "section": "Running Python",
    "text": "Running Python\n\nREPL: python\nScripts: python file.py\nNotebooks: Jupyter/VS Code"
  },
  {
    "objectID": "slides/python/02-python-basics.html#hello-world",
    "href": "slides/python/02-python-basics.html#hello-world",
    "title": "Python Session 2 — Python Basics",
    "section": "Hello, world",
    "text": "Hello, world\nprint(\"Hello, world\")"
  },
  {
    "objectID": "slides/python/02-python-basics.html#variables-and-types",
    "href": "slides/python/02-python-basics.html#variables-and-types",
    "title": "Python Session 2 — Python Basics",
    "section": "Variables and types",
    "text": "Variables and types\nx = 42          # int\npi = 3.14       # float\nname = \"Ana\"    # str\nok = True       # bool\n\nDynamic typing; type(x) tells you the runtime type"
  },
  {
    "objectID": "slides/python/02-python-basics.html#strings",
    "href": "slides/python/02-python-basics.html#strings",
    "title": "Python Session 2 — Python Basics",
    "section": "Strings",
    "text": "Strings\nmsg = f\"Hi {name}!\"\nmsg.upper()\n\nSlicing, methods, f-strings for formatting"
  },
  {
    "objectID": "slides/python/02-python-basics.html#lists-ordered-mutable",
    "href": "slides/python/02-python-basics.html#lists-ordered-mutable",
    "title": "Python Session 2 — Python Basics",
    "section": "Lists (ordered, mutable)",
    "text": "Lists (ordered, mutable)\nnums = [1, 2, 3]\nnums.append(4)\nnums[0] = 10"
  },
  {
    "objectID": "slides/python/02-python-basics.html#tuples-ordered-immutable",
    "href": "slides/python/02-python-basics.html#tuples-ordered-immutable",
    "title": "Python Session 2 — Python Basics",
    "section": "Tuples (ordered, immutable)",
    "text": "Tuples (ordered, immutable)\npoint = (3, 4)\n\nUseful for fixed records, dictionary keys"
  },
  {
    "objectID": "slides/python/02-python-basics.html#sets-unique-unordered",
    "href": "slides/python/02-python-basics.html#sets-unique-unordered",
    "title": "Python Session 2 — Python Basics",
    "section": "Sets (unique, unordered)",
    "text": "Sets (unique, unordered)\nids = {1, 2, 2, 3}  # {1, 2, 3}\n\nFast membership tests"
  },
  {
    "objectID": "slides/python/02-python-basics.html#dicts-key-value",
    "href": "slides/python/02-python-basics.html#dicts-key-value",
    "title": "Python Session 2 — Python Basics",
    "section": "Dicts (key → value)",
    "text": "Dicts (key → value)\nuser = {\"id\": 1, \"name\": \"Ana\"}\nuser[\"email\"] = \"ana@example.com\""
  },
  {
    "objectID": "slides/python/02-python-basics.html#conditionals",
    "href": "slides/python/02-python-basics.html#conditionals",
    "title": "Python Session 2 — Python Basics",
    "section": "Conditionals",
    "text": "Conditionals\nif x &gt; 0:\n    print(\"positive\")\nelif x == 0:\n    print(\"zero\")\nelse:\n    print(\"negative\")"
  },
  {
    "objectID": "slides/python/02-python-basics.html#loops-while",
    "href": "slides/python/02-python-basics.html#loops-while",
    "title": "Python Session 2 — Python Basics",
    "section": "Loops: while",
    "text": "Loops: while\ni = 0\nwhile i &lt; 3:\n    print(i)\n    i += 1"
  },
  {
    "objectID": "slides/python/02-python-basics.html#loops-for",
    "href": "slides/python/02-python-basics.html#loops-for",
    "title": "Python Session 2 — Python Basics",
    "section": "Loops: for",
    "text": "Loops: for\nfor n in [1, 2, 3]:\n    print(n)\n\nIterates over any iterable"
  },
  {
    "objectID": "slides/python/02-python-basics.html#range-and-enumerate",
    "href": "slides/python/02-python-basics.html#range-and-enumerate",
    "title": "Python Session 2 — Python Basics",
    "section": "Range and enumerate",
    "text": "Range and enumerate\nfor i, n in enumerate(range(5, 8)):\n    print(i, n)"
  },
  {
    "objectID": "slides/python/02-python-basics.html#comprehensions",
    "href": "slides/python/02-python-basics.html#comprehensions",
    "title": "Python Session 2 — Python Basics",
    "section": "Comprehensions",
    "text": "Comprehensions\nsquares = [n*n for n in range(10)]\n\nRead as: build a list by repeating a pattern"
  },
  {
    "objectID": "slides/python/02-python-basics.html#functions",
    "href": "slides/python/02-python-basics.html#functions",
    "title": "Python Session 2 — Python Basics",
    "section": "Functions",
    "text": "Functions\ndef area(r: float) -&gt; float:\n    return 3.1416 * r * r\n\nOptional type hints aid readability"
  },
  {
    "objectID": "slides/python/02-python-basics.html#exceptions",
    "href": "slides/python/02-python-basics.html#exceptions",
    "title": "Python Session 2 — Python Basics",
    "section": "Exceptions",
    "text": "Exceptions\ntry:\n    1 / 0\nexcept ZeroDivisionError as e:\n    print(\"oops\", e)"
  },
  {
    "objectID": "slides/python/02-python-basics.html#modules-and-imports",
    "href": "slides/python/02-python-basics.html#modules-and-imports",
    "title": "Python Session 2 — Python Basics",
    "section": "Modules and imports",
    "text": "Modules and imports\nimport math\nfrom pathlib import Path"
  },
  {
    "objectID": "slides/python/02-python-basics.html#file-io",
    "href": "slides/python/02-python-basics.html#file-io",
    "title": "Python Session 2 — Python Basics",
    "section": "File I/O",
    "text": "File I/O\nwith open(\"notes.txt\", \"w\", encoding=\"utf-8\") as f:\n    f.write(\"hello\\n\")"
  },
  {
    "objectID": "slides/python/02-python-basics.html#reallife-analogy",
    "href": "slides/python/02-python-basics.html#reallife-analogy",
    "title": "Python Session 2 — Python Basics",
    "section": "Real‑life analogy",
    "text": "Real‑life analogy\n\nData structures = containers in a workshop\nUse the right one to work faster and safer"
  },
  {
    "objectID": "slides/python/02-python-basics.html#idioms",
    "href": "slides/python/02-python-basics.html#idioms",
    "title": "Python Session 2 — Python Basics",
    "section": "Idioms",
    "text": "Idioms\n\nEAFP: Easier to Ask Forgiveness than Permission\nTruthy/Falsey values"
  },
  {
    "objectID": "slides/python/02-python-basics.html#exercise-1",
    "href": "slides/python/02-python-basics.html#exercise-1",
    "title": "Python Session 2 — Python Basics",
    "section": "Exercise 1",
    "text": "Exercise 1\n\nRead a CSV, count lines, print first 5"
  },
  {
    "objectID": "slides/python/02-python-basics.html#exercise-2",
    "href": "slides/python/02-python-basics.html#exercise-2",
    "title": "Python Session 2 — Python Basics",
    "section": "Exercise 2",
    "text": "Exercise 2\n\nBuild a frequency dict for words in a text"
  },
  {
    "objectID": "slides/python/02-python-basics.html#wrapup",
    "href": "slides/python/02-python-basics.html#wrapup",
    "title": "Python Session 2 — Python Basics",
    "section": "Wrap‑up",
    "text": "Wrap‑up\n\nYou can write basic Python with core data structures and control flow\nNext: OOP and types"
  },
  {
    "objectID": "slides/python/02-python-basics.html#slicing",
    "href": "slides/python/02-python-basics.html#slicing",
    "title": "Python Session 2 — Python Basics",
    "section": "Slicing",
    "text": "Slicing\nnums = [0,1,2,3,4]\nnums[1:4], nums[:3], nums[::2]"
  },
  {
    "objectID": "slides/python/02-python-basics.html#unpacking",
    "href": "slides/python/02-python-basics.html#unpacking",
    "title": "Python Session 2 — Python Basics",
    "section": "Unpacking",
    "text": "Unpacking\na, b = 1, 2\nx, *rest = [10, 20, 30]"
  },
  {
    "objectID": "slides/python/02-python-basics.html#truthiness",
    "href": "slides/python/02-python-basics.html#truthiness",
    "title": "Python Session 2 — Python Basics",
    "section": "Truthiness",
    "text": "Truthiness\n\nempty list/dict/set → False; non‑empty → True"
  },
  {
    "objectID": "slides/python/02-python-basics.html#ternary-expression",
    "href": "slides/python/02-python-basics.html#ternary-expression",
    "title": "Python Session 2 — Python Basics",
    "section": "Ternary expression",
    "text": "Ternary expression\nlabel = \"even\" if x % 2 == 0 else \"odd\""
  },
  {
    "objectID": "slides/python/02-python-basics.html#with-context-manager",
    "href": "slides/python/02-python-basics.html#with-context-manager",
    "title": "Python Session 2 — Python Basics",
    "section": "with context manager",
    "text": "with context manager\nfrom contextlib import suppress\nwith suppress(FileNotFoundError):\n    open(\"maybe.txt\").read()"
  },
  {
    "objectID": "slides/python/02-python-basics.html#small-gotchas",
    "href": "slides/python/02-python-basics.html#small-gotchas",
    "title": "Python Session 2 — Python Basics",
    "section": "Small gotchas",
    "text": "Small gotchas\n\nMutable default args; indentation errors"
  },
  {
    "objectID": "slides/python/02-python-basics.html#knowledge-check-quiz",
    "href": "slides/python/02-python-basics.html#knowledge-check-quiz",
    "title": "Python Session 2 — Python Basics",
    "section": "Knowledge check (quiz)",
    "text": "Knowledge check (quiz)\n\nList vs tuple difference?\nWhat does enumerate do?"
  },
  {
    "objectID": "slides/python/03-oop-types.html#why-oop",
    "href": "slides/python/03-oop-types.html#why-oop",
    "title": "Python Session 3 — OOP and Types",
    "section": "Why OOP?",
    "text": "Why OOP?\n\nOrganize code around data + behavior"
  },
  {
    "objectID": "slides/python/03-oop-types.html#basic-class",
    "href": "slides/python/03-oop-types.html#basic-class",
    "title": "Python Session 3 — OOP and Types",
    "section": "Basic class",
    "text": "Basic class\nclass Account:\n    def __init__(self, owner: str, balance: float = 0.0):\n        self.owner = owner\n        self.balance = balance\n    def deposit(self, amount: float):\n        self.balance += amount"
  },
  {
    "objectID": "slides/python/03-oop-types.html#methods-and-self",
    "href": "slides/python/03-oop-types.html#methods-and-self",
    "title": "Python Session 3 — OOP and Types",
    "section": "Methods and self",
    "text": "Methods and self\n\nself is the instance being acted upon\nMethods are functions attached to a class"
  },
  {
    "objectID": "slides/python/03-oop-types.html#properties",
    "href": "slides/python/03-oop-types.html#properties",
    "title": "Python Session 3 — OOP and Types",
    "section": "Properties",
    "text": "Properties\nclass Temperature:\n    def __init__(self, c: float):\n        self._c = c\n    @property\n    def celsius(self):\n        return self._c\n    @celsius.setter\n    def celsius(self, v):\n        self._c = v"
  },
  {
    "objectID": "slides/python/03-oop-types.html#inheritance",
    "href": "slides/python/03-oop-types.html#inheritance",
    "title": "Python Session 3 — OOP and Types",
    "section": "Inheritance",
    "text": "Inheritance\nclass Savings(Account):\n    def interest(self, rate: float):\n        self.balance *= (1 + rate)"
  },
  {
    "objectID": "slides/python/03-oop-types.html#composition-over-inheritance",
    "href": "slides/python/03-oop-types.html#composition-over-inheritance",
    "title": "Python Session 3 — OOP and Types",
    "section": "Composition over inheritance",
    "text": "Composition over inheritance\n\nCombine objects to build bigger ones"
  },
  {
    "objectID": "slides/python/03-oop-types.html#dataclasses",
    "href": "slides/python/03-oop-types.html#dataclasses",
    "title": "Python Session 3 — OOP and Types",
    "section": "Dataclasses",
    "text": "Dataclasses\nfrom dataclasses import dataclass\n\n@dataclass\nclass Order:\n    id: int\n    item: str\n    qty: int = 1\n\nGenerates init, repr, comparisons"
  },
  {
    "objectID": "slides/python/03-oop-types.html#typing-basics",
    "href": "slides/python/03-oop-types.html#typing-basics",
    "title": "Python Session 3 — OOP and Types",
    "section": "Typing basics",
    "text": "Typing basics\nfrom typing import List, Dict, Optional\n\nHelps tools catch mistakes; doesn’t change runtime"
  },
  {
    "objectID": "slides/python/03-oop-types.html#generics-and-protocols-brief",
    "href": "slides/python/03-oop-types.html#generics-and-protocols-brief",
    "title": "Python Session 3 — OOP and Types",
    "section": "Generics and Protocols (brief)",
    "text": "Generics and Protocols (brief)\n\nList[int], Dict[str, float]\nStructural typing (duck typing) via Protocols"
  },
  {
    "objectID": "slides/python/03-oop-types.html#exceptions-as-control-flow-for-errors",
    "href": "slides/python/03-oop-types.html#exceptions-as-control-flow-for-errors",
    "title": "Python Session 3 — OOP and Types",
    "section": "Exceptions as control flow for errors",
    "text": "Exceptions as control flow for errors\ndef divide(a: float, b: float) -&gt; float:\n    if b == 0:\n        raise ValueError(\"b must not be zero\")\n    return a / b"
  },
  {
    "objectID": "slides/python/03-oop-types.html#testing-mindset",
    "href": "slides/python/03-oop-types.html#testing-mindset",
    "title": "Python Session 3 — OOP and Types",
    "section": "Testing mindset",
    "text": "Testing mindset\n\nWrite small tests for class behavior\nUse assert statements or pytest"
  },
  {
    "objectID": "slides/python/03-oop-types.html#exercise-1",
    "href": "slides/python/03-oop-types.html#exercise-1",
    "title": "Python Session 3 — OOP and Types",
    "section": "Exercise 1",
    "text": "Exercise 1\n\nBuild a Bank with Accounts; deposit/withdraw; compute interest"
  },
  {
    "objectID": "slides/python/03-oop-types.html#exercise-2",
    "href": "slides/python/03-oop-types.html#exercise-2",
    "title": "Python Session 3 — OOP and Types",
    "section": "Exercise 2",
    "text": "Exercise 2\n\nConvert an existing dict into a dataclass and add methods"
  },
  {
    "objectID": "slides/python/03-oop-types.html#equality-and-hashing",
    "href": "slides/python/03-oop-types.html#equality-and-hashing",
    "title": "Python Session 3 — OOP and Types",
    "section": "Equality and hashing",
    "text": "Equality and hashing\nfrom dataclasses import dataclass\n@dataclass(frozen=True)\nclass Point:\n    x: int; y: int\n\nHashable → usable in sets/dicts"
  },
  {
    "objectID": "slides/python/03-oop-types.html#repr-and-str",
    "href": "slides/python/03-oop-types.html#repr-and-str",
    "title": "Python Session 3 — OOP and Types",
    "section": "repr and str",
    "text": "repr and str\n\nHuman vs debug representations"
  },
  {
    "objectID": "slides/python/03-oop-types.html#static-and-class-methods",
    "href": "slides/python/03-oop-types.html#static-and-class-methods",
    "title": "Python Session 3 — OOP and Types",
    "section": "Static and class methods",
    "text": "Static and class methods\nclass C:\n    @staticmethod\n    def util(): ...\n    @classmethod\n    def from_str(cls, s): ..."
  },
  {
    "objectID": "slides/python/03-oop-types.html#type-checking-tools",
    "href": "slides/python/03-oop-types.html#type-checking-tools",
    "title": "Python Session 3 — OOP and Types",
    "section": "Type checking tools",
    "text": "Type checking tools\n\nmypy, pyright; gradual typing in practice"
  },
  {
    "objectID": "slides/python/03-oop-types.html#knowledge-check-quiz",
    "href": "slides/python/03-oop-types.html#knowledge-check-quiz",
    "title": "Python Session 3 — OOP and Types",
    "section": "Knowledge check (quiz)",
    "text": "Knowledge check (quiz)\n\nWhen prefer dataclass over regular class?\nWhat’s a Protocol good for?"
  },
  {
    "objectID": "slides/python/03-oop-types.html#wrapup",
    "href": "slides/python/03-oop-types.html#wrapup",
    "title": "Python Session 3 — OOP and Types",
    "section": "Wrap‑up",
    "text": "Wrap‑up\n\nYou can model data with classes/dataclasses and add type hints\nNext: NumPy and pandas"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#why-numpy",
    "href": "slides/python/04-numpy-pandas.html#why-numpy",
    "title": "Python Session 4 — NumPy and pandas",
    "section": "Why NumPy?",
    "text": "Why NumPy?\n\nFast vectorized operations on arrays"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#create-arrays",
    "href": "slides/python/04-numpy-pandas.html#create-arrays",
    "title": "Python Session 4 — NumPy and pandas",
    "section": "Create arrays",
    "text": "Create arrays\nimport numpy as np\n\nnp.zeros((3, 3))\nnp.arange(10)\nnp.linspace(0, 1, 5)"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#dtypes",
    "href": "slides/python/04-numpy-pandas.html#dtypes",
    "title": "Python Session 4 — NumPy and pandas",
    "section": "Dtypes",
    "text": "Dtypes\n\nint32, float64, bool, datetime64, etc.\nMemory layout matters for speed"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#indexing-and-slicing",
    "href": "slides/python/04-numpy-pandas.html#indexing-and-slicing",
    "title": "Python Session 4 — NumPy and pandas",
    "section": "Indexing and slicing",
    "text": "Indexing and slicing\nx = np.arange(9).reshape(3, 3)\nx[0, 0], x[:, 1], x[1:, :]"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#broadcasting",
    "href": "slides/python/04-numpy-pandas.html#broadcasting",
    "title": "Python Session 4 — NumPy and pandas",
    "section": "Broadcasting",
    "text": "Broadcasting\nx = np.arange(3)\n(x + 10) * 2\n\nRules allow operations on different shapes"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#vectorization-vs-loops",
    "href": "slides/python/04-numpy-pandas.html#vectorization-vs-loops",
    "title": "Python Session 4 — NumPy and pandas",
    "section": "Vectorization vs loops",
    "text": "Vectorization vs loops\n\nPrefer vectorized expressions → C-level speed\nOnly loop in Python when necessary"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#aggregations",
    "href": "slides/python/04-numpy-pandas.html#aggregations",
    "title": "Python Session 4 — NumPy and pandas",
    "section": "Aggregations",
    "text": "Aggregations\nx.sum(), x.mean(axis=0), x.max()"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#random",
    "href": "slides/python/04-numpy-pandas.html#random",
    "title": "Python Session 4 — NumPy and pandas",
    "section": "Random",
    "text": "Random\nrng = np.random.default_rng(0)\nrng.normal(size=5)"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#pandas-intro",
    "href": "slides/python/04-numpy-pandas.html#pandas-intro",
    "title": "Python Session 4 — NumPy and pandas",
    "section": "pandas intro",
    "text": "pandas intro\nimport pandas as pd\n\ndf = pd.DataFrame({\"a\": [1,2,3], \"b\": [4,5,6]})"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#series-and-dataframe",
    "href": "slides/python/04-numpy-pandas.html#series-and-dataframe",
    "title": "Python Session 4 — NumPy and pandas",
    "section": "Series and DataFrame",
    "text": "Series and DataFrame\n\nSeries = 1D labeled array\nDataFrame = 2D table with columns"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#readwrite-files-finance-dataset",
    "href": "slides/python/04-numpy-pandas.html#readwrite-files-finance-dataset",
    "title": "Python Session 4 — NumPy and pandas",
    "section": "Read/write files (finance dataset)",
    "text": "Read/write files (finance dataset)\n# prices for top-20 US tickers (date, symbol, close)\ndf = pd.read_csv(\"data/prices-top20.csv\", parse_dates=[\"date\"])  # provided by fetch_prices.py"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#returns-pivot",
    "href": "slides/python/04-numpy-pandas.html#returns-pivot",
    "title": "Python Session 4 — NumPy and pandas",
    "section": "Returns pivot",
    "text": "Returns pivot\n# compute daily returns pivot with symbols as columns\npx = df.sort_values([\"symbol\",\"date\"]).assign(\n    ret = df.groupby(\"symbol\")[\"close\"].pct_change()\n)\nret_pivot = px.pivot(index=\"date\", columns=\"symbol\", values=\"ret\")\nret_pivot.describe().T.head()"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#simple-visualization",
    "href": "slides/python/04-numpy-pandas.html#simple-visualization",
    "title": "Python Session 4 — NumPy and pandas",
    "section": "Simple visualization",
    "text": "Simple visualization\n# plot a couple of tickers (requires a plotting backend available)\nret_pivot[[\"AAPL\", \"MSFT\"]].cumsum().plot(title=\"Cumulative Returns: AAPL vs MSFT\")"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#groupby-and-aggregations",
    "href": "slides/python/04-numpy-pandas.html#groupby-and-aggregations",
    "title": "Python Session 4 — NumPy and pandas",
    "section": "Groupby and aggregations",
    "text": "Groupby and aggregations\npx.groupby(\"symbol\").agg(vol=(\"ret\",\"std\"), mean=(\"ret\",\"mean\")).sort_values(\"vol\", ascending=False).head()"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#mergejoin",
    "href": "slides/python/04-numpy-pandas.html#mergejoin",
    "title": "Python Session 4 — NumPy and pandas",
    "section": "Merge/join",
    "text": "Merge/join\nleft.merge(right, on=\"id\", how=\"left\")"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#pivot-and-melt",
    "href": "slides/python/04-numpy-pandas.html#pivot-and-melt",
    "title": "Python Session 4 — NumPy and pandas",
    "section": "Pivot and melt",
    "text": "Pivot and melt\npd.pivot_table(df, index=\"date\", values=\"close\", aggfunc=\"mean\")"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#time-series-quick-tour",
    "href": "slides/python/04-numpy-pandas.html#time-series-quick-tour",
    "title": "Python Session 4 — NumPy and pandas",
    "section": "Time series quick tour",
    "text": "Time series quick tour\ns = pd.date_range(\"2024-01-01\", periods=5, freq=\"D\")"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#performance-tips",
    "href": "slides/python/04-numpy-pandas.html#performance-tips",
    "title": "Python Session 4 — NumPy and pandas",
    "section": "Performance tips",
    "text": "Performance tips\n\nUse categories, vectorized ops, avoid apply in hot paths"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#exercise-1",
    "href": "slides/python/04-numpy-pandas.html#exercise-1",
    "title": "Python Session 4 — NumPy and pandas",
    "section": "Exercise 1",
    "text": "Exercise 1\n\nLoad data/prices-top20.csv, compute summary stats per symbol"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#exercise-2",
    "href": "slides/python/04-numpy-pandas.html#exercise-2",
    "title": "Python Session 4 — NumPy and pandas",
    "section": "Exercise 2",
    "text": "Exercise 2\n\nBuild a cumulative return chart for 2–3 tickers"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#wrapup",
    "href": "slides/python/04-numpy-pandas.html#wrapup",
    "title": "Python Session 4 — NumPy and pandas",
    "section": "Wrap‑up",
    "text": "Wrap‑up\n\nYou can manipulate arrays with NumPy and tables with pandas\nNext: numerical optimization"
  },
  {
    "objectID": "slides/python/05-optimization.html#why-optimize",
    "href": "slides/python/05-optimization.html#why-optimize",
    "title": "Python Session 5 — Numerical Optimization",
    "section": "Why optimize?",
    "text": "Why optimize?\n\nFind best parameters or satisfy equations"
  },
  {
    "objectID": "slides/python/05-optimization.html#scipy-optimize",
    "href": "slides/python/05-optimization.html#scipy-optimize",
    "title": "Python Session 5 — Numerical Optimization",
    "section": "SciPy optimize",
    "text": "SciPy optimize\nfrom scipy import optimize as opt"
  },
  {
    "objectID": "slides/python/05-optimization.html#root-finding-scalar",
    "href": "slides/python/05-optimization.html#root-finding-scalar",
    "title": "Python Session 5 — Numerical Optimization",
    "section": "Root finding: scalar",
    "text": "Root finding: scalar\nimport math\nfrom scipy import optimize as opt\n\nf = lambda x: x*math.cos(x) - 1\nroot = opt.brentq(f, 0, 2)"
  },
  {
    "objectID": "slides/python/05-optimization.html#root-finding-systems",
    "href": "slides/python/05-optimization.html#root-finding-systems",
    "title": "Python Session 5 — Numerical Optimization",
    "section": "Root finding: systems",
    "text": "Root finding: systems\nimport numpy as np\n\ndef F(v):\n    x, y = v\n    return [x**2 + y**2 - 1, x - y]\nsol = opt.root(F, [0.5, 0.1])"
  },
  {
    "objectID": "slides/python/05-optimization.html#minimization-unconstrained",
    "href": "slides/python/05-optimization.html#minimization-unconstrained",
    "title": "Python Session 5 — Numerical Optimization",
    "section": "Minimization: unconstrained",
    "text": "Minimization: unconstrained\nquad = lambda x: (x-3)**2\nres = opt.minimize(lambda v: quad(v[0]), x0=[0.0])"
  },
  {
    "objectID": "slides/python/05-optimization.html#markowitz-example-finance",
    "href": "slides/python/05-optimization.html#markowitz-example-finance",
    "title": "Python Session 5 — Numerical Optimization",
    "section": "Markowitz example (finance)",
    "text": "Markowitz example (finance)\n# use returns from prices-top20.csv to estimate mu and Sigma\nimport pandas as pd, numpy as np\npx = pd.read_csv('data/prices-top20.csv', parse_dates=['date']).sort_values(['symbol','date'])\nret = px.groupby('symbol')['close'].pct_change()\nR = px.assign(ret=ret).pivot(index='date', columns='symbol', values='ret').dropna()\nmu = R.mean().values\nSigma = np.cov(R.values, rowvar=False)\n\n# min variance portfolio with sum(w)=1 and w&gt;=0\nN = len(mu)\nvar = lambda w: w @ Sigma @ w\ncons = ({'type': 'eq', 'fun': lambda w: np.sum(w)-1}, {'type':'ineq','fun': lambda w: w})\nres = opt.minimize(var, x0=np.ones(N)/N, constraints=cons, bounds=[(0,1)]*N)\nweights = pd.Series(res.x, index=R.columns).sort_values(ascending=False)\nweights.head()"
  },
  {
    "objectID": "slides/python/05-optimization.html#minimization-constrained",
    "href": "slides/python/05-optimization.html#minimization-constrained",
    "title": "Python Session 5 — Numerical Optimization",
    "section": "Minimization: constrained",
    "text": "Minimization: constrained\nbounds = [(0, None)]\nres = opt.minimize(lambda v: (v[0]-1)**2, x0=[2.0], bounds=bounds)"
  },
  {
    "objectID": "slides/python/05-optimization.html#least-squares",
    "href": "slides/python/05-optimization.html#least-squares",
    "title": "Python Session 5 — Numerical Optimization",
    "section": "Least squares",
    "text": "Least squares\nimport numpy as np\nx = np.linspace(0, 1, 50)\ny = 1 + 2*x + 0.1*np.random.randn(50)\nA = np.c_[np.ones_like(x), x]\ncoef, *_ = np.linalg.lstsq(A, y, rcond=None)"
  },
  {
    "objectID": "slides/python/05-optimization.html#gradient-information",
    "href": "slides/python/05-optimization.html#gradient-information",
    "title": "Python Session 5 — Numerical Optimization",
    "section": "Gradient information",
    "text": "Gradient information\n\nProvide jac/hess when available\nSpeeds convergence and improves accuracy"
  },
  {
    "objectID": "slides/python/05-optimization.html#scaling-and-constraints",
    "href": "slides/python/05-optimization.html#scaling-and-constraints",
    "title": "Python Session 5 — Numerical Optimization",
    "section": "Scaling and constraints",
    "text": "Scaling and constraints\n\nScale variables; use bounds/constraints\nTrust-constr for complex problems"
  },
  {
    "objectID": "slides/python/05-optimization.html#diagnostics",
    "href": "slides/python/05-optimization.html#diagnostics",
    "title": "Python Session 5 — Numerical Optimization",
    "section": "Diagnostics",
    "text": "Diagnostics\n\nCheck status, fun, grad, nfev\nPlot objective over iterations when possible"
  },
  {
    "objectID": "slides/python/05-optimization.html#exercise-1",
    "href": "slides/python/05-optimization.html#exercise-1",
    "title": "Python Session 5 — Numerical Optimization",
    "section": "Exercise 1",
    "text": "Exercise 1\n\nFit a logistic curve to data using least squares"
  },
  {
    "objectID": "slides/python/05-optimization.html#exercise-2",
    "href": "slides/python/05-optimization.html#exercise-2",
    "title": "Python Session 5 — Numerical Optimization",
    "section": "Exercise 2",
    "text": "Exercise 2\n\nMinimize a portfolio variance under weight constraints on prices-top20.csv"
  },
  {
    "objectID": "slides/python/05-optimization.html#reallife-analogy",
    "href": "slides/python/05-optimization.html#reallife-analogy",
    "title": "Python Session 5 — Numerical Optimization",
    "section": "Real‑life analogy",
    "text": "Real‑life analogy\n\nTuning a recipe: adjust ingredients to reach best taste"
  },
  {
    "objectID": "slides/python/05-optimization.html#wrapup",
    "href": "slides/python/05-optimization.html#wrapup",
    "title": "Python Session 5 — Numerical Optimization",
    "section": "Wrap‑up",
    "text": "Wrap‑up\n\nYou can solve roots and minimize objectives with SciPy and NumPy\nNext: Flask and Streamlit"
  },
  {
    "objectID": "slides/python/06-web-apps.html#two-paths-to-apps",
    "href": "slides/python/06-web-apps.html#two-paths-to-apps",
    "title": "Python Session 6 — Flask and Streamlit",
    "section": "Two paths to apps",
    "text": "Two paths to apps\n\nFlask: micro web framework (routes, templates)\nStreamlit: UI for data apps with minimal code"
  },
  {
    "objectID": "slides/python/06-web-apps.html#flask-hello-app",
    "href": "slides/python/06-web-apps.html#flask-hello-app",
    "title": "Python Session 6 — Flask and Streamlit",
    "section": "Flask: hello app",
    "text": "Flask: hello app\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.get(\"/\")\ndef home():\n    return \"Hello, Flask!\"\n\nif __name__ == \"__main__\":\n    app.run(debug=True)"
  },
  {
    "objectID": "slides/python/06-web-apps.html#flask-routes-and-params",
    "href": "slides/python/06-web-apps.html#flask-routes-and-params",
    "title": "Python Session 6 — Flask and Streamlit",
    "section": "Flask: routes and params",
    "text": "Flask: routes and params\n@app.get(\"/greet/&lt;name&gt;\")\ndef greet(name):\n    return f\"Hi {name}!\""
  },
  {
    "objectID": "slides/python/06-web-apps.html#flask-templates-jinja2",
    "href": "slides/python/06-web-apps.html#flask-templates-jinja2",
    "title": "Python Session 6 — Flask and Streamlit",
    "section": "Flask: templates (Jinja2)",
    "text": "Flask: templates (Jinja2)\n\nRender HTML with variables and loops\nKeep logic in Python, presentation in templates"
  },
  {
    "objectID": "slides/python/06-web-apps.html#flask-forms-and-json",
    "href": "slides/python/06-web-apps.html#flask-forms-and-json",
    "title": "Python Session 6 — Flask and Streamlit",
    "section": "Flask: forms and JSON",
    "text": "Flask: forms and JSON\n\nrequest.form, request.json\nReturn jsonify for APIs"
  },
  {
    "objectID": "slides/python/06-web-apps.html#streamlit-hello-app",
    "href": "slides/python/06-web-apps.html#streamlit-hello-app",
    "title": "Python Session 6 — Flask and Streamlit",
    "section": "Streamlit: hello app",
    "text": "Streamlit: hello app\nimport streamlit as st\nst.title(\"Hello Streamlit\")\nname = st.text_input(\"Name\")\nst.write(f\"Hi {name}\")"
  },
  {
    "objectID": "slides/python/06-web-apps.html#streamlit-widgets",
    "href": "slides/python/06-web-apps.html#streamlit-widgets",
    "title": "Python Session 6 — Flask and Streamlit",
    "section": "Streamlit: widgets",
    "text": "Streamlit: widgets\n\nsliders, selectbox, file_uploader\ninstant feedback loop"
  },
  {
    "objectID": "slides/python/06-web-apps.html#streamlit-caching",
    "href": "slides/python/06-web-apps.html#streamlit-caching",
    "title": "Python Session 6 — Flask and Streamlit",
    "section": "Streamlit: caching",
    "text": "Streamlit: caching\n@st.cache_data\ndef load_data(path):\n    ..."
  },
  {
    "objectID": "slides/python/06-web-apps.html#deploying",
    "href": "slides/python/06-web-apps.html#deploying",
    "title": "Python Session 6 — Flask and Streamlit",
    "section": "Deploying",
    "text": "Deploying\n\nFlask: gunicorn + reverse proxy\nStreamlit: Streamlit Cloud or container"
  },
  {
    "objectID": "slides/python/06-web-apps.html#security-basics",
    "href": "slides/python/06-web-apps.html#security-basics",
    "title": "Python Session 6 — Flask and Streamlit",
    "section": "Security basics",
    "text": "Security basics\n\nNever trust user input; validate and sanitize\nHide secrets via env variables"
  },
  {
    "objectID": "slides/python/06-web-apps.html#exercise-1",
    "href": "slides/python/06-web-apps.html#exercise-1",
    "title": "Python Session 6 — Flask and Streamlit",
    "section": "Exercise 1",
    "text": "Exercise 1\n\nFlask endpoint that sums two numbers from query params"
  },
  {
    "objectID": "slides/python/06-web-apps.html#exercise-2",
    "href": "slides/python/06-web-apps.html#exercise-2",
    "title": "Python Session 6 — Flask and Streamlit",
    "section": "Exercise 2",
    "text": "Exercise 2\n\nStreamlit app that uploads a CSV and shows summary stats"
  },
  {
    "objectID": "slides/python/06-web-apps.html#reallife-analogy",
    "href": "slides/python/06-web-apps.html#reallife-analogy",
    "title": "Python Session 6 — Flask and Streamlit",
    "section": "Real‑life analogy",
    "text": "Real‑life analogy\n\nFlask = build your kitchen from scratch\nStreamlit = plug‑and‑play kitchen kit"
  },
  {
    "objectID": "slides/python/06-web-apps.html#wrapup",
    "href": "slides/python/06-web-apps.html#wrapup",
    "title": "Python Session 6 — Flask and Streamlit",
    "section": "Wrap‑up",
    "text": "Wrap‑up\n\nYou can create basic web/data apps quickly\nNext: Big data with Polars and Dask"
  },
  {
    "objectID": "slides/python/06-web-apps.html#flask-blueprints",
    "href": "slides/python/06-web-apps.html#flask-blueprints",
    "title": "Python Session 6 — Flask and Streamlit",
    "section": "Flask: blueprints",
    "text": "Flask: blueprints\n\nModularize routes for larger apps"
  },
  {
    "objectID": "slides/python/06-web-apps.html#streamlit-state",
    "href": "slides/python/06-web-apps.html#streamlit-state",
    "title": "Python Session 6 — Flask and Streamlit",
    "section": "Streamlit: state",
    "text": "Streamlit: state\nif \"n\" not in st.session_state:\n    st.session_state.n = 0"
  },
  {
    "objectID": "slides/python/06-web-apps.html#deployment-gotchas",
    "href": "slides/python/06-web-apps.html#deployment-gotchas",
    "title": "Python Session 6 — Flask and Streamlit",
    "section": "Deployment gotchas",
    "text": "Deployment gotchas\n\nTimeouts, static files, CORS"
  },
  {
    "objectID": "slides/python/06-web-apps.html#knowledge-check-quiz",
    "href": "slides/python/06-web-apps.html#knowledge-check-quiz",
    "title": "Python Session 6 — Flask and Streamlit",
    "section": "Knowledge check (quiz)",
    "text": "Knowledge check (quiz)\n\nWhen pick Streamlit over Flask?\nOne security practice for secrets?"
  },
  {
    "objectID": "slides/python/07-bigdata.html#why-big-data-tools",
    "href": "slides/python/07-bigdata.html#why-big-data-tools",
    "title": "Python Session 7 — Big Data with Polars and Dask",
    "section": "Why big data tools?",
    "text": "Why big data tools?\n\nMemory won’t hold everything; need out‑of‑core and parallelism"
  },
  {
    "objectID": "slides/python/07-bigdata.html#polars-intro",
    "href": "slides/python/07-bigdata.html#polars-intro",
    "title": "Python Session 7 — Big Data with Polars and Dask",
    "section": "Polars intro",
    "text": "Polars intro\nimport polars as pl\n\ndf = pl.DataFrame({\"a\": [1,2,3], \"b\": [4,5,6]})"
  },
  {
    "objectID": "slides/python/07-bigdata.html#eager-vs-lazy",
    "href": "slides/python/07-bigdata.html#eager-vs-lazy",
    "title": "Python Session 7 — Big Data with Polars and Dask",
    "section": "Eager vs Lazy",
    "text": "Eager vs Lazy\nq = df.lazy().with_columns((pl.col(\"a\") + pl.col(\"b\")).alias(\"c\"))\nres = q.collect()\n\nLazy builds a plan; executes once → fast"
  },
  {
    "objectID": "slides/python/07-bigdata.html#io-formats-finance-dataset",
    "href": "slides/python/07-bigdata.html#io-formats-finance-dataset",
    "title": "Python Session 7 — Big Data with Polars and Dask",
    "section": "IO formats (finance dataset)",
    "text": "IO formats (finance dataset)\n# read course prices (long format) and compute vol per symbol\npx = pl.read_csv('data/prices-top20.csv')\nret = px.sort(['symbol','date']).with_columns(\n    pl.col('close').pct_change().over('symbol').alias('ret')\n)\nvol = ret.group_by('symbol').agg(pl.col('ret').std().alias('vol')).sort('vol', descending=True)\nvol.head()"
  },
  {
    "objectID": "slides/python/07-bigdata.html#expressions-and-column-ops",
    "href": "slides/python/07-bigdata.html#expressions-and-column-ops",
    "title": "Python Session 7 — Big Data with Polars and Dask",
    "section": "Expressions and column ops",
    "text": "Expressions and column ops\ndf.with_columns((pl.col(\"a\") * 2).alias(\"a2\"))"
  },
  {
    "objectID": "slides/python/07-bigdata.html#groupby-and-joins-in-polars",
    "href": "slides/python/07-bigdata.html#groupby-and-joins-in-polars",
    "title": "Python Session 7 — Big Data with Polars and Dask",
    "section": "Groupby and joins in Polars",
    "text": "Groupby and joins in Polars\ndf.groupby(\"a\").agg(pl.col(\"b\").sum())"
  },
  {
    "objectID": "slides/python/07-bigdata.html#dask-intro-course-dataset",
    "href": "slides/python/07-bigdata.html#dask-intro-course-dataset",
    "title": "Python Session 7 — Big Data with Polars and Dask",
    "section": "Dask intro (course dataset)",
    "text": "Dask intro (course dataset)\nimport dask.dataframe as dd\n\ndf = dd.read_csv('data/prices-top20.csv', dtype={'symbol':'object'})\ndf['date'] = dd.to_datetime(df['date'])\ndf = df.set_index('date')\nmonthly = df.groupby([dd.Grouper(freq='M'), 'symbol'])['close'].last().pct_change()\nmonthly.head().compute()\n\nPartitioned DataFrame across cores/machines"
  },
  {
    "objectID": "slides/python/07-bigdata.html#dask-compute-graph",
    "href": "slides/python/07-bigdata.html#dask-compute-graph",
    "title": "Python Session 7 — Big Data with Polars and Dask",
    "section": "Dask compute graph",
    "text": "Dask compute graph\n\nLazy; df.head() triggers small compute; df.compute() executes"
  },
  {
    "objectID": "slides/python/07-bigdata.html#mapreduce-style",
    "href": "slides/python/07-bigdata.html#mapreduce-style",
    "title": "Python Session 7 — Big Data with Polars and Dask",
    "section": "Map/Reduce style",
    "text": "Map/Reduce style\n\nmap_partitions, aggregations, groupby across partitions"
  },
  {
    "objectID": "slides/python/07-bigdata.html#scheduling-and-diagnostics",
    "href": "slides/python/07-bigdata.html#scheduling-and-diagnostics",
    "title": "Python Session 7 — Big Data with Polars and Dask",
    "section": "Scheduling and diagnostics",
    "text": "Scheduling and diagnostics\n\nSingle‑machine threaded/process, distributed cluster\nDashboard for monitoring tasks"
  },
  {
    "objectID": "slides/python/07-bigdata.html#when-to-use-which",
    "href": "slides/python/07-bigdata.html#when-to-use-which",
    "title": "Python Session 7 — Big Data with Polars and Dask",
    "section": "When to use which?",
    "text": "When to use which?\n\nPolars: single‑node speed, expressive API\nDask: scale out, interop with NumPy/pandas"
  },
  {
    "objectID": "slides/python/07-bigdata.html#exercise-1",
    "href": "slides/python/07-bigdata.html#exercise-1",
    "title": "Python Session 7 — Big Data with Polars and Dask",
    "section": "Exercise 1",
    "text": "Exercise 1\n\nConvert prices-top20.csv to Parquet and compute per‑symbol volatility"
  },
  {
    "objectID": "slides/python/07-bigdata.html#exercise-2",
    "href": "slides/python/07-bigdata.html#exercise-2",
    "title": "Python Session 7 — Big Data with Polars and Dask",
    "section": "Exercise 2",
    "text": "Exercise 2\n\nUse Dask to compute monthly returns by symbol and list the most volatile"
  },
  {
    "objectID": "slides/python/07-bigdata.html#reallife-analogy",
    "href": "slides/python/07-bigdata.html#reallife-analogy",
    "title": "Python Session 7 — Big Data with Polars and Dask",
    "section": "Real‑life analogy",
    "text": "Real‑life analogy\n\nDask = many workers on an assembly line\nPolars = one very fast worker with a smart plan"
  },
  {
    "objectID": "slides/python/07-bigdata.html#wrapup",
    "href": "slides/python/07-bigdata.html#wrapup",
    "title": "Python Session 7 — Big Data with Polars and Dask",
    "section": "Wrap‑up",
    "text": "Wrap‑up\n\nYou can process large datasets with Polars/Dask patterns"
  },
  {
    "objectID": "slides/python/01-setup-env.html#mamba-faster-conda",
    "href": "slides/python/01-setup-env.html#mamba-faster-conda",
    "title": "Python Session 1 — Setup and Tools",
    "section": "Mamba (faster conda)",
    "text": "Mamba (faster conda)\n\nDrop-in replacement for many conda commands, much faster solver\nInstall once, then use mamba instead of conda for installs\n\nconda install -n base -c conda-forge mamba -y\nmamba create -n course310 python=3.10 -y\nmamba install numpy pandas jupyterlab -y"
  },
  {
    "objectID": "slides/python/02-python-basics.html#lambdas-and-itertools-bonus",
    "href": "slides/python/02-python-basics.html#lambdas-and-itertools-bonus",
    "title": "Python Session 2 — Python Basics",
    "section": "Lambdas and itertools (bonus)",
    "text": "Lambdas and itertools (bonus)\nfrom itertools import accumulate, chain\ndouble = lambda x: 2*x\nlist(accumulate([1,2,3]))  # [1, 3, 6]\nlist(chain([1,2], [3,4]))  # [1,2,3,4]"
  },
  {
    "objectID": "slides/python/03-oop-types.html#encapsulation-conventions",
    "href": "slides/python/03-oop-types.html#encapsulation-conventions",
    "title": "Python Session 3 — OOP and Types",
    "section": "Encapsulation conventions",
    "text": "Encapsulation conventions\n\nUse leading underscore _attr to signal internal attributes\nAvoid exposing mutable references; return copies or read-only views"
  },
  {
    "objectID": "slides/python/03-oop-types.html#name-mangling-double-underscore",
    "href": "slides/python/03-oop-types.html#name-mangling-double-underscore",
    "title": "Python Session 3 — OOP and Types",
    "section": "Name mangling (double underscore)",
    "text": "Name mangling (double underscore)\nclass Safe:\n    def __init__(self):\n        self.__pin = 1234  # becomes _Safe__pin\n    def check(self, x):\n        return x == self.__pin"
  },
  {
    "objectID": "slides/python/03-oop-types.html#slots-to-save-memory",
    "href": "slides/python/03-oop-types.html#slots-to-save-memory",
    "title": "Python Session 3 — OOP and Types",
    "section": "slots to save memory",
    "text": "slots to save memory\nclass Point2D:\n    __slots__ = (\"x\", \"y\")\n    def __init__(self, x: float, y: float):\n        self.x, self.y = x, y\n\nPrevents dynamic attributes; reduces per-instance memory"
  },
  {
    "objectID": "slides/python/03-oop-types.html#abstract-base-classes-abc",
    "href": "slides/python/03-oop-types.html#abstract-base-classes-abc",
    "title": "Python Session 3 — OOP and Types",
    "section": "Abstract Base Classes (ABC)",
    "text": "Abstract Base Classes (ABC)\nfrom abc import ABC, abstractmethod\n\nclass PriceSource(ABC):\n    @abstractmethod\n    def get_price(self, symbol: str) -&gt; float: ...\n\nclass YahooSource(PriceSource):\n    def get_price(self, symbol): return 123.45"
  },
  {
    "objectID": "slides/python/03-oop-types.html#multiple-inheritance-and-mro",
    "href": "slides/python/03-oop-types.html#multiple-inheritance-and-mro",
    "title": "Python Session 3 — OOP and Types",
    "section": "Multiple inheritance and MRO",
    "text": "Multiple inheritance and MRO\n\nUse sparingly; inspect Method Resolution Order via C.mro()"
  },
  {
    "objectID": "slides/python/03-oop-types.html#dataclasses-default_factory",
    "href": "slides/python/03-oop-types.html#dataclasses-default_factory",
    "title": "Python Session 3 — OOP and Types",
    "section": "Dataclasses: default_factory",
    "text": "Dataclasses: default_factory\nfrom dataclasses import dataclass, field\n\n@dataclass\nclass Portfolio:\n    name: str\n    positions: dict[str, float] = field(default_factory=dict)"
  },
  {
    "objectID": "slides/python/03-oop-types.html#dataclasses-post-init-and-validation",
    "href": "slides/python/03-oop-types.html#dataclasses-post-init-and-validation",
    "title": "Python Session 3 — OOP and Types",
    "section": "Dataclasses: post-init and validation",
    "text": "Dataclasses: post-init and validation\nfrom dataclasses import dataclass\n\n@dataclass\nclass Trade:\n    symbol: str\n    qty: int\n    def __post_init__(self):\n        if self.qty == 0:\n            raise ValueError(\"qty must be non-zero\")"
  },
  {
    "objectID": "slides/python/03-oop-types.html#protocols-with-example",
    "href": "slides/python/03-oop-types.html#protocols-with-example",
    "title": "Python Session 3 — OOP and Types",
    "section": "Protocols with example",
    "text": "Protocols with example\nfrom typing import Protocol\n\nclass HasArea(Protocol):\n    def area(self) -&gt; float: ...\n\nclass Circle:\n    def __init__(self, r: float): self.r = r\n    def area(self) -&gt; float: return 3.1416*self.r*self.r"
  },
  {
    "objectID": "slides/python/03-oop-types.html#generic-classes",
    "href": "slides/python/03-oop-types.html#generic-classes",
    "title": "Python Session 3 — OOP and Types",
    "section": "Generic classes",
    "text": "Generic classes\nfrom typing import Generic, TypeVar\nT = TypeVar('T')\n\nclass Box(Generic[T]):\n    def __init__(self, value: T): self.value = value"
  },
  {
    "objectID": "slides/python/03-oop-types.html#typeddict-and-newtype",
    "href": "slides/python/03-oop-types.html#typeddict-and-newtype",
    "title": "Python Session 3 — OOP and Types",
    "section": "TypedDict and NewType",
    "text": "TypedDict and NewType\nfrom typing import TypedDict, NewType\n\nclass UserTD(TypedDict):\n    id: int\n    name: str\n\nUserId = NewType('UserId', int)"
  },
  {
    "objectID": "slides/python/03-oop-types.html#context-managers-in-classes",
    "href": "slides/python/03-oop-types.html#context-managers-in-classes",
    "title": "Python Session 3 — OOP and Types",
    "section": "Context managers in classes",
    "text": "Context managers in classes\nclass Locker:\n    def __enter__(self): print(\"lock\"); return self\n    def __exit__(self, exc_type, exc, tb): print(\"unlock\"); return False"
  },
  {
    "objectID": "slides/python/03-oop-types.html#operator-overloading",
    "href": "slides/python/03-oop-types.html#operator-overloading",
    "title": "Python Session 3 — OOP and Types",
    "section": "Operator overloading",
    "text": "Operator overloading\nfrom dataclasses import dataclass\n@dataclass(frozen=True)\nclass Vec:\n    x: float; y: float\n    def __add__(self, o): return Vec(self.x+o.x, self.y+o.y)\n    def __lt__(self, o): return (self.x, self.y) &lt; (o.x, o.y)"
  },
  {
    "objectID": "slides/python/03-oop-types.html#enum-for-choices",
    "href": "slides/python/03-oop-types.html#enum-for-choices",
    "title": "Python Session 3 — OOP and Types",
    "section": "Enum for choices",
    "text": "Enum for choices\nfrom enum import Enum, auto\nclass Side(Enum): BUY = auto(); SELL = auto()"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#boolean-indexing",
    "href": "slides/python/04-numpy-pandas.html#boolean-indexing",
    "title": "Python Session 4 — NumPy and pandas",
    "section": "Boolean indexing",
    "text": "Boolean indexing\nmask = x % 2 == 0\nx[mask]"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#axis-semantics",
    "href": "slides/python/04-numpy-pandas.html#axis-semantics",
    "title": "Python Session 4 — NumPy and pandas",
    "section": "Axis semantics",
    "text": "Axis semantics\n\naxis=0 → down rows (per column)\naxis=1 → across columns (per row)"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#missing-values",
    "href": "slides/python/04-numpy-pandas.html#missing-values",
    "title": "Python Session 4 — NumPy and pandas",
    "section": "Missing values",
    "text": "Missing values\ndf.isna().sum()\ndf.fillna(0)\ndf.dropna(subset=[\"close\"]).shape"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#method-chaining-style",
    "href": "slides/python/04-numpy-pandas.html#method-chaining-style",
    "title": "Python Session 4 — NumPy and pandas",
    "section": "Method chaining style",
    "text": "Method chaining style\nsummary = (\n  px.dropna(subset=[\"ret\"])  \n    .groupby(\"symbol\")\n    .agg(vol=(\"ret\",\"std\"), mean=(\"ret\",\"mean\"))\n    .reset_index()\n)"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#categorical-dtype",
    "href": "slides/python/04-numpy-pandas.html#categorical-dtype",
    "title": "Python Session 4 — NumPy and pandas",
    "section": "Categorical dtype",
    "text": "Categorical dtype\npx['symbol'] = px['symbol'].astype('category')\npx['symbol'].cat.codes.head()"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#datetime-ops",
    "href": "slides/python/04-numpy-pandas.html#datetime-ops",
    "title": "Python Session 4 — NumPy and pandas",
    "section": "Datetime ops",
    "text": "Datetime ops\npx['month'] = px['date'].dt.to_period('M')\npx.groupby(['month','symbol'])['close'].last()"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#groupby-custom-functions",
    "href": "slides/python/04-numpy-pandas.html#groupby-custom-functions",
    "title": "Python Session 4 — NumPy and pandas",
    "section": "Groupby: custom functions",
    "text": "Groupby: custom functions\ndef sharpe(x):\n    return x.mean()/x.std()\npx.groupby('symbol')['ret'].apply(sharpe).sort_values(ascending=False).head()"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#join-types-overview",
    "href": "slides/python/04-numpy-pandas.html#join-types-overview",
    "title": "Python Session 4 — NumPy and pandas",
    "section": "Join types overview",
    "text": "Join types overview\n\ninner, left, right, outer; be explicit and check sizes before/after"
  },
  {
    "objectID": "slides/python/05-optimization.html#designing-objectives",
    "href": "slides/python/05-optimization.html#designing-objectives",
    "title": "Python Session 5 — Numerical Optimization",
    "section": "Designing objectives",
    "text": "Designing objectives\n\nSmooth and well-scaled objectives converge faster\nPrefer returning scalar; avoid non-differentiable kinks if possible"
  },
  {
    "objectID": "slides/python/05-optimization.html#supplying-jacobianhessian",
    "href": "slides/python/05-optimization.html#supplying-jacobianhessian",
    "title": "Python Session 5 — Numerical Optimization",
    "section": "Supplying Jacobian/Hessian",
    "text": "Supplying Jacobian/Hessian\ndef f(x): ...\ndef jac(x): ...\nopt.minimize(f, x0, jac=jac, method='BFGS')"
  },
  {
    "objectID": "slides/python/05-optimization.html#bounds-and-linear-constraints",
    "href": "slides/python/05-optimization.html#bounds-and-linear-constraints",
    "title": "Python Session 5 — Numerical Optimization",
    "section": "Bounds and linear constraints",
    "text": "Bounds and linear constraints\nfrom scipy.optimize import Bounds, LinearConstraint\nbounds = Bounds(0, 1)\nA = [[1, 1]]; lb=[1]; ub=[1]\nlin = LinearConstraint(A, lb, ub)\nopt.minimize(var, x0, bounds=bounds, constraints=[lin])"
  },
  {
    "objectID": "slides/python/05-optimization.html#callbacks-and-termination",
    "href": "slides/python/05-optimization.html#callbacks-and-termination",
    "title": "Python Session 5 — Numerical Optimization",
    "section": "Callbacks and termination",
    "text": "Callbacks and termination\ndef cb(xk): print(xk)\nopt.minimize(f, x0, callback=cb, options={\"maxiter\": 200})"
  },
  {
    "objectID": "slides/python/05-optimization.html#linear-programming-highs",
    "href": "slides/python/05-optimization.html#linear-programming-highs",
    "title": "Python Session 5 — Numerical Optimization",
    "section": "Linear programming (HiGHS)",
    "text": "Linear programming (HiGHS)\nfrom scipy.optimize import linprog\nc = [1, 2]; A_ub=[[1,1]]; b_ub=[3]\nlinprog(c, A_ub=A_ub, b_ub=b_ub)"
  },
  {
    "objectID": "slides/python/05-optimization.html#global-optimization-basinhopping",
    "href": "slides/python/05-optimization.html#global-optimization-basinhopping",
    "title": "Python Session 5 — Numerical Optimization",
    "section": "Global optimization (basinhopping)",
    "text": "Global optimization (basinhopping)\nfrom scipy.optimize import basinhopping\nres = basinhopping(lambda x: (x[0]-3)**2 + 10*abs(np.sin(x[0])), x0=[0.0])"
  },
  {
    "objectID": "slides/python/05-optimization.html#trust-constr-highlights",
    "href": "slides/python/05-optimization.html#trust-constr-highlights",
    "title": "Python Session 5 — Numerical Optimization",
    "section": "Trust-constr highlights",
    "text": "Trust-constr highlights\n\nHandles bounds + (non)linear constraints with Jacobians\nGood default for complex constrained problems"
  },
  {
    "objectID": "slides/python/05-optimization.html#debugging-failures",
    "href": "slides/python/05-optimization.html#debugging-failures",
    "title": "Python Session 5 — Numerical Optimization",
    "section": "Debugging failures",
    "text": "Debugging failures\n\nInspect res.message, try different initial guesses\nCheck gradients numerically; rescale variables"
  },
  {
    "objectID": "slides/python/06-web-apps.html#flask-project-structure",
    "href": "slides/python/06-web-apps.html#flask-project-structure",
    "title": "Python Session 6 — Flask and Streamlit",
    "section": "Flask project structure",
    "text": "Flask project structure\nmyapp/\n    app.py\n    templates/\n    static/"
  },
  {
    "objectID": "slides/python/06-web-apps.html#static-files",
    "href": "slides/python/06-web-apps.html#static-files",
    "title": "Python Session 6 — Flask and Streamlit",
    "section": "Static files",
    "text": "Static files\n\nPlace CSS/JS in static/; link via url_for('static', filename='app.css')"
  },
  {
    "objectID": "slides/python/06-web-apps.html#error-handling",
    "href": "slides/python/06-web-apps.html#error-handling",
    "title": "Python Session 6 — Flask and Streamlit",
    "section": "Error handling",
    "text": "Error handling\n@app.errorhandler(404)\ndef not_found(e): return (\"Missing\", 404)"
  },
  {
    "objectID": "slides/python/06-web-apps.html#logging",
    "href": "slides/python/06-web-apps.html#logging",
    "title": "Python Session 6 — Flask and Streamlit",
    "section": "Logging",
    "text": "Logging\nimport logging; logging.basicConfig(level=logging.INFO)\napp.logger.info(\"started\")"
  },
  {
    "objectID": "slides/python/06-web-apps.html#sessions-and-cookies",
    "href": "slides/python/06-web-apps.html#sessions-and-cookies",
    "title": "Python Session 6 — Flask and Streamlit",
    "section": "Sessions and cookies",
    "text": "Sessions and cookies\napp.secret_key = \"change-me\"\nsession['user'] = 'ana'"
  },
  {
    "objectID": "slides/python/06-web-apps.html#csrf-and-forms",
    "href": "slides/python/06-web-apps.html#csrf-and-forms",
    "title": "Python Session 6 — Flask and Streamlit",
    "section": "CSRF and forms",
    "text": "CSRF and forms\n\nUse WTForms/Flask-WTF for CSRF tokens on POST forms"
  },
  {
    "objectID": "slides/python/06-web-apps.html#file-uploads",
    "href": "slides/python/06-web-apps.html#file-uploads",
    "title": "Python Session 6 — Flask and Streamlit",
    "section": "File uploads",
    "text": "File uploads\nf = request.files['file']\nf.save('uploads/data.csv')"
  },
  {
    "objectID": "slides/python/06-web-apps.html#streamlit-session-state",
    "href": "slides/python/06-web-apps.html#streamlit-session-state",
    "title": "Python Session 6 — Flask and Streamlit",
    "section": "Streamlit: session state",
    "text": "Streamlit: session state\nimport streamlit as st\nst.session_state.setdefault('count', 0)"
  },
  {
    "objectID": "slides/python/06-web-apps.html#streamlit-caching-nuances",
    "href": "slides/python/06-web-apps.html#streamlit-caching-nuances",
    "title": "Python Session 6 — Flask and Streamlit",
    "section": "Streamlit: caching nuances",
    "text": "Streamlit: caching nuances\n\nst.cache_data for data; st.cache_resource for models/clients"
  },
  {
    "objectID": "slides/python/06-web-apps.html#deployment-checklist",
    "href": "slides/python/06-web-apps.html#deployment-checklist",
    "title": "Python Session 6 — Flask and Streamlit",
    "section": "Deployment checklist",
    "text": "Deployment checklist\n\nProcfile/requirements, gunicorn app:app, env vars"
  },
  {
    "objectID": "slides/python/07-bigdata.html#predicate-pushdown",
    "href": "slides/python/07-bigdata.html#predicate-pushdown",
    "title": "Python Session 7 — Big Data with Polars and Dask",
    "section": "Predicate pushdown",
    "text": "Predicate pushdown\n\nFilters and projections applied early to reduce IO"
  },
  {
    "objectID": "slides/python/07-bigdata.html#polars-window-functions",
    "href": "slides/python/07-bigdata.html#polars-window-functions",
    "title": "Python Session 7 — Big Data with Polars and Dask",
    "section": "Polars window functions",
    "text": "Polars window functions\nret.with_columns(\n  pl.col('ret').rolling_mean(window_size=21).over('symbol').alias('m21')\n)"
  },
  {
    "objectID": "slides/python/07-bigdata.html#explain-and-inspect-plan",
    "href": "slides/python/07-bigdata.html#explain-and-inspect-plan",
    "title": "Python Session 7 — Big Data with Polars and Dask",
    "section": "Explain and inspect plan",
    "text": "Explain and inspect plan\nq = ret.lazy().group_by('symbol').agg(pl.col('ret').std())\nprint(q.explain())"
  },
  {
    "objectID": "slides/python/07-bigdata.html#streaming-csv-read",
    "href": "slides/python/07-bigdata.html#streaming-csv-read",
    "title": "Python Session 7 — Big Data with Polars and Dask",
    "section": "Streaming CSV read",
    "text": "Streaming CSV read\npl.scan_csv('big.csv').filter(pl.col('a')&gt;0).select(['a','b']).collect()"
  },
  {
    "objectID": "slides/python/07-bigdata.html#partitions-and-persist",
    "href": "slides/python/07-bigdata.html#partitions-and-persist",
    "title": "Python Session 7 — Big Data with Polars and Dask",
    "section": "Partitions and persist",
    "text": "Partitions and persist\ndf = df.repartition(npartitions=8).persist()"
  },
  {
    "objectID": "slides/python/07-bigdata.html#shuffles-and-groupby-scale",
    "href": "slides/python/07-bigdata.html#shuffles-and-groupby-scale",
    "title": "Python Session 7 — Big Data with Polars and Dask",
    "section": "Shuffles and groupby scale",
    "text": "Shuffles and groupby scale\n\nWide groupby/joins require shuffles; watch cluster memory"
  },
  {
    "objectID": "slides/python/07-bigdata.html#memory-tips",
    "href": "slides/python/07-bigdata.html#memory-tips",
    "title": "Python Session 7 — Big Data with Polars and Dask",
    "section": "Memory tips",
    "text": "Memory tips\n\nUse categories, drop columns, write Parquet with snappy/zstd"
  },
  {
    "objectID": "slides/python/07-bigdata.html#parquet-advantages",
    "href": "slides/python/07-bigdata.html#parquet-advantages",
    "title": "Python Session 7 — Big Data with Polars and Dask",
    "section": "Parquet advantages",
    "text": "Parquet advantages\n\nColumnar, compressed, predicate pushdown; better than CSV at scale"
  },
  {
    "objectID": "slides/python/07-bigdata.html#read_csv-blocksize",
    "href": "slides/python/07-bigdata.html#read_csv-blocksize",
    "title": "Python Session 7 — Big Data with Polars and Dask",
    "section": "read_csv blocksize",
    "text": "read_csv blocksize\ndd.read_csv('*.csv', blocksize='64MB')"
  },
  {
    "objectID": "slides/python/07-bigdata.html#schedulers",
    "href": "slides/python/07-bigdata.html#schedulers",
    "title": "Python Session 7 — Big Data with Polars and Dask",
    "section": "Schedulers",
    "text": "Schedulers\n\nthreads, processes, distributed; choose per workload"
  },
  {
    "objectID": "slides/python/07-bigdata.html#diagnostics-dashboard",
    "href": "slides/python/07-bigdata.html#diagnostics-dashboard",
    "title": "Python Session 7 — Big Data with Polars and Dask",
    "section": "Diagnostics dashboard",
    "text": "Diagnostics dashboard\n\nclient = Client(); track tasks, memory, workers via dashboard"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#how-vba-relates-to-windows-vs-mac",
    "href": "slides/vba/01-intro-vba.html#how-vba-relates-to-windows-vs-mac",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "How VBA relates to Windows vs Mac",
    "text": "How VBA relates to Windows vs Mac\n\nWindows: Excel exposes rich automation via COM/ActiveX; VBA can call Windows APIs and Office libraries broadly.\nCOM/ActiveX is a Windows feature that enables inter-application communication and advanced integrations.\nMac: Same VBA language and Excel Object Model for most tasks; no COM/ActiveX, some features differ (File dialogs, Add‑ins, some APIs).\nBitness matters on Windows (32/64‑bit Office)."
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#excel-ui-tour-winmac",
    "href": "slides/vba/01-intro-vba.html#excel-ui-tour-winmac",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Excel UI tour (Win/Mac)",
    "text": "Excel UI tour (Win/Mac)\n\nWindows screenshot: Excel workbook with the Ribbon showing the Developer tab\nMac screenshot: Excel for Mac with Developer tab visible\nCallouts: Record Macro button, Visual Basic button, Macros list"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#opening-the-vbe-stepbystep",
    "href": "slides/vba/01-intro-vba.html#opening-the-vbe-stepbystep",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Opening the VBE (step‑by‑step)",
    "text": "Opening the VBE (step‑by‑step)\n\nWindows: Use Alt+F11, or Ribbon → Developer → Visual Basic\nMac: Use Option+F11, or Ribbon → Developer → Visual Basic\nVerify the Project Explorer (left) and Properties (bottom‑left); if hidden: View → Project Explorer, View → Properties Window\nUse View menu to show/hide panes if your layout differs."
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#select-case-cleaner-branching",
    "href": "slides/vba/01-intro-vba.html#select-case-cleaner-branching",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Select Case (cleaner branching)",
    "text": "Select Case (cleaner branching)\nSelect Case Range(\"B1\").Value\n    Case \"A\", \"B\"\n        MsgBox \"Group 1\"\n    Case \"C\"\n        MsgBox \"Group 2\"\n    Case Else\n        MsgBox \"Other\"\nEnd Select\n\nEasier to read than nested Ifs for discrete categories"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#for-each-loop-items-directly",
    "href": "slides/vba/01-intro-vba.html#for-each-loop-items-directly",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "For Each (loop items directly)",
    "text": "For Each (loop items directly)\nDim c As Range\nFor Each c In Worksheets(\"Sheet1\").Range(\"A1:A10\")\n    If Len(c.Value) &gt; 0 Then c.Font.Bold = True\nNext c\n\nUse For Each for collections (Worksheets, Shapes, Cells in a Range)\nExit For to break early; Do While/Do Until for condition‑based loops"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#image-credits",
    "href": "slides/vba/01-intro-vba.html#image-credits",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Image credits",
    "text": "Image credits\n\nExcel (Windows) UI screenshot: https://upload.wikimedia.org/wikipedia/en/a/a8/Excel_2010.png — Microsoft product screenshot via Wikipedia. Used with permission from Microsoft. No modifications beyond resizing.\nExcel (Mac) UI screenshot: https://upload.wikimedia.org/wikipedia/en/a/ab/Excel_for_Mac_screenshot.png — Microsoft product screenshot via Wikipedia. Used with permission from Microsoft. No modifications beyond resizing.\nVisual Basic Editor screenshot: https://learn.microsoft.com/en-us/office/vba/images/5d9acd78-5168-4a0c-83b6-3f1e440bf649.png — Microsoft Learn. Used with permission from Microsoft. No modifications beyond resizing."
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#do-while-do-until",
    "href": "slides/vba/01-intro-vba.html#do-while-do-until",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Do While / Do Until",
    "text": "Do While / Do Until\nDim r As Long\nr = 1\nDo While Cells(r, 1).Value &lt;&gt; \"\"\n    Cells(r, 2).Value = Len(Cells(r, 1).Value)\n    r = r + 1\nLoop\n\nDo While condition ... Loop: runs while condition is True\nDo Until condition ... Loop: runs until condition becomes True\nPrefer guard rails: increment counters, add max-iteration safety to avoid infinite loops\n\nDim tries As Long\ntries = 0\nDo\n    tries = tries + 1\n    If tries &gt; 1000 Then Exit Do ' safety\n    ' ... work ...\nLoop Until Application.CountA(Range(\"A1:A10\")) = 10\n\nTip: Choose For when you know counts, For Each for collections, Do While/Until for condition-driven loops"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#arrays-static-vs-dynamic",
    "href": "slides/vba/01-intro-vba.html#arrays-static-vs-dynamic",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Arrays (static vs dynamic)",
    "text": "Arrays (static vs dynamic)\n\nAn array is a collection of values indexed by number.\nStatic arrays have fixed size; Dynamic arrays can be resized with ReDim.\n\n' Static array (fixed size)\nDim a(1 To 5) As Long\na(1) = 10\n\n' Dynamic array (resize later)\nDim b() As Double\nReDim b(1 To 3)\nb(3) = 1.23\nReDim Preserve b(1 To 5) ' keep existing values\nReDim b(1 To 2) ' loses existing values\n\nStatic arrays: fastest, but fixed bounds\nDynamic arrays: ReDim to set size; ReDim Preserve to keep values.\nBounds defaults: if unspecified, VBA uses zero-based indexing; prefer explicit 1 To N for clarity\nMany programming languages use zero-based indexing; VBA defaults to zero-based if no bounds are specified, but using 1 To N is clearer for Excel users."
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#collections-and-dictionary",
    "href": "slides/vba/01-intro-vba.html#collections-and-dictionary",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Collections and Dictionary",
    "text": "Collections and Dictionary\n\nTwo main collection types: Collection (built-in) and Scripting.Dictionary (Windows).\nCollections have no fixed size; Dictionaries map keys to values.\n\n' Collection (built-in)\nDim coll As New Collection\ncoll.Add \"Alice\"\ncoll.Add \"Bob\"\nDim item As Variant\nFor Each item In coll\n    Debug.Print item\nNext\n\n' Scripting.Dictionary (Windows)\nDim dict As Object\nSet dict = CreateObject(\"Scripting.Dictionary\")\ndict(\"FR\") = \"France\"\ndict(\"ES\") = \"Spain\"\nIf dict.Exists(\"FR\") Then Debug.Print dict(\"FR\")\n\nCollection: ordered, allows duplicates, 1-based indexing via Item\nDictionary: key→value map, fast lookup; on Mac, available via AppleScript support but often easiest to simulate with Collection or use array lookups\nTip: For portability, prefer Collection or arrays unless you really need keyed lookup\nDim vs Set', Dim declares a variable;Set` assigns an object reference.\nAn object reference points to an instance of an object (like a Collection or Dictionary).\nThis means that if you modify the object through one reference, the changes are reflected when accessing it through another reference.\n\nExample\nDim coll1 As New Collection\nDim coll2 As Collection\nSet coll2 = coll1 ' coll2 now references the same Collection as coll1\ncoll1.Add \"Item1\"\nDebug.Print coll2.Count ' Outputs 1, as coll2 references the same Collection"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#subs-vs-functions-udfs",
    "href": "slides/vba/01-intro-vba.html#subs-vs-functions-udfs",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Subs vs Functions (UDFs)",
    "text": "Subs vs Functions (UDFs)\n' Sub performs actions\nSub ClearData()\n    Worksheets(\"Sheet1\").Range(\"A2:D1000\").ClearContents\nEnd Sub\n\n' Function returns a value (UDF)\nPublic Function AddTax(amount As Double, rate As Double) As Double\n    AddTax = amount * (1 + rate)\nEnd Function\n\nSub: run from VBE, buttons, or macros dialog; can modify workbook state\nFunction: returns a value; can be used in worksheet cells as a UDF\nUDF caveats: should be pure (no side effects UI/file I/O) for worksheet recalculation; otherwise Excel may return #VALUE!"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#scope-and-lifetime",
    "href": "slides/vba/01-intro-vba.html#scope-and-lifetime",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Scope and lifetime",
    "text": "Scope and lifetime\n\nWhat variables are visible where, and how long they last.\nPublic vs Private: controls visibility across modules\nPublic = visible everywhere; Private = only inside the module\nConst for constants, variables that are not meant to change.\nConstants are stored more efficiently in memory since their values do not change.\nSub procedures can also be declared as Public or Private.\nIf no declaration is given, Sub procedures are Public by default.\nEnum for named integer constants.\nDefining variables outside any procedure makes them module-level (retain value while module is loaded).\n\nOption Explicit\n\nPublic Const VAT As Double = 0.20 ' project-wide constant (in a standard module)\nPrivate totalRuns As Long          ' module-level state\n\nPublic Sub RunTask()\n    totalRuns = totalRuns + 1\n    Dim localMsg As String ' procedure scope\n    localMsg = \"Run #\" & totalRuns\n    Debug.Print localMsg\nEnd Sub\n\nPrivate Function Hidden() As Boolean ' not visible outside module\n    Hidden = True\nEnd Function\n\nPublic Sub Remember()\n    Static last As Long ' retains value across calls\n    last = last + 1\n    Debug.Print last\nEnd Sub\n\nPublic Enum Status\n    stPending = 0\n    stDone = 1\n    stError = 2\nEnd Enum"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#debugging-essentials",
    "href": "slides/vba/01-intro-vba.html#debugging-essentials",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Debugging essentials",
    "text": "Debugging essentials\n\nBreakpoints (click left margin), the code execution will pause there.\nStep Into F8, Step Over Shift+F8, Step Out Ctrl+Shift+F8\nImmediate window Ctrl+G: evaluate (? Range(\"A1\").Value) or call procedures\nDebug.Print for tracing; Stop statement to break programmatically"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#worksheetfunction-and-application-helpers",
    "href": "slides/vba/01-intro-vba.html#worksheetfunction-and-application-helpers",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "WorksheetFunction and Application helpers",
    "text": "WorksheetFunction and Application helpers\n' WorksheetFunction raises errors on failure\nDim pos As Long\npos = Application.WorksheetFunction.Match(\"Key\", Range(\"A1:A100\"), 0)\n\n' Safer pattern: Application.Match returns Variant (Error when not found)\nDim v As Variant\nv = Application.Match(\"Key\", Range(\"A1:A100\"), 0)\nIf IsError(v) Then\n    MsgBox \"Not found\"\nElse\n    pos = CLng(v)\nEnd If\n\n' Other useful helpers\nDim sumA As Double\nsumA = Application.WorksheetFunction.Sum(Range(\"A1:A10\"))\nDim nonEmpty As Long\nnonEmpty = Application.WorksheetFunction.CountA(Range(\"A:A\"))\n\nPrefer Application.Match for lookup to avoid runtime errors; check with IsError\nMany Excel functions are available via WorksheetFunction"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#events-basics-workbook-worksheet",
    "href": "slides/vba/01-intro-vba.html#events-basics-workbook-worksheet",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Events basics (Workbook, Worksheet)",
    "text": "Events basics (Workbook, Worksheet)\n' In ThisWorkbook code-behind\nPrivate Sub Workbook_Open()\n    MsgBox \"Welcome!\"\nEnd Sub\n\n' In a Sheet module (e.g., Sheet1)\nPrivate Sub Worksheet_Change(ByVal Target As Range)\n    On Error GoTo Done\n    If Intersect(Target, Me.Range(\"A:A\")) Is Nothing Then Exit Sub\n    Application.EnableEvents = False\n    Target.Offset(0, 1).Value = UCase$(Target.Value)\nDone:\n    Application.EnableEvents = True\nEnd Sub\n\nPlace event code in the correct object module (ThisWorkbook, specific Sheet)\nAlways guard with Application.EnableEvents = False/True inside change events\nAdd quick exit guards with Intersect to limit scope"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#recording-a-macro-winmac",
    "href": "slides/vba/01-intro-vba.html#recording-a-macro-winmac",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Recording a macro (Win/Mac)",
    "text": "Recording a macro (Win/Mac)\n\n\nWindows\n\nDeveloper → Record Macro\nName, choose storage (This Workbook/Personal)\nDo actions → Stop → inspect in VBE\nUse “Use Relative References” for relative actions\nNaming: start with a letter; verbs like FormatHeader\nQuick edit: Developer → Macros → Edit\n\n\nMac\n\nDeveloper → Record Macro (similar flow)\nSome shortcuts/dialogs differ slightly\nRelative References also available\nPrefer shape/button over keyboard shortcut (conflicts)\nStorage mirrors Windows; Personal Macro Workbook exists"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#procedures-variables-and-types",
    "href": "slides/vba/01-intro-vba.html#procedures-variables-and-types",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Procedures, variables, and types",
    "text": "Procedures, variables, and types\n\n\nSub procedures and variables\nSub MyTask()\n    ' your steps here\nEnd Sub\n\nSub Boxes()\n    Dim total As Long ' variable declaration\n    total = 42\n    MsgBox total\nEnd Sub\n\nSub = a routine you can run; lives in a Module\nDim name As Type declares storage\n\n\nTypes and Option Explicit\n\nCommon types: Integer, Long, Double, String, Boolean, Date\nVariant can hold anything (flexible but slower)\nPrefer explicit types for clarity and speed\nNot all types are available on Mac.\nThe Option Explicit statement forces variable declaration, reducing typos and bugs.\n\nOption Explicit ' require declarations\nSub Safer()\n    Dim count As Long\n    count = 10\n    MsgBox count\nEnd Sub\n\nOption Explicit → fewer typos, clearer code"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#branching-if-vs-select-case",
    "href": "slides/vba/01-intro-vba.html#branching-if-vs-select-case",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Branching: If vs Select Case",
    "text": "Branching: If vs Select Case\n\n\nIf…Then\nIf Range(\"A1\").Value &gt; 0 Then\n    MsgBox \"Positive\"\nElse\n    MsgBox \"Non‑positive\"\nEnd If\n\nGreat for simple conditions and ranges\n\n\nSelect Case\nSelect Case Range(\"B1\").Value\n    Case \"A\", \"B\": MsgBox \"Group 1\"\n    Case \"C\": MsgBox \"Group 2\"\n    Case Else: MsgBox \"Other\"\nEnd Select\n\nCleaner than nested Ifs for discrete categories"
  },
  {
    "objectID": "slides/vba/02-vba-platforms-macros.html#accessing-macros-winmac",
    "href": "slides/vba/02-vba-platforms-macros.html#accessing-macros-winmac",
    "title": "Introduction to VBA and Python",
    "section": "Accessing macros (Win/Mac)",
    "text": "Accessing macros (Win/Mac)\n\n\nWindows\n\nDeveloper tab → Macros (Alt+F8)\nAssign to buttons, shapes, or shortcuts\nCheck Trust Center settings\n\n\nMac\n\nDeveloper tab → Macros\nCustomize Ribbon & Toolbar for quick access\nSome shortcuts differ"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#procedures-subs-and-functions",
    "href": "slides/vba/03-vba-programming-basics.html#procedures-subs-and-functions",
    "title": "Introduction to VBA and Python",
    "section": "Procedures: Subs and Functions",
    "text": "Procedures: Subs and Functions\n\n\nSubroutines (Subs)\nSub Greet()\n    MsgBox \"Welcome!\"\nEnd Sub\n\nKeep them short and focused\n\n\nFunctions\nFunction NetPrice(price As Double, tax As Double) As Double\n    NetPrice = price * (1 + tax)\nEnd Function\n\nCan be used in cells too"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#procedure-signatures-byrefbyval-optional-paramarray",
    "href": "slides/vba/03-vba-programming-basics.html#procedure-signatures-byrefbyval-optional-paramarray",
    "title": "Introduction to VBA and Python",
    "section": "Procedure signatures: ByRef/ByVal, Optional, ParamArray",
    "text": "Procedure signatures: ByRef/ByVal, Optional, ParamArray\nSub Discount(ByRef price As Double, ByVal rate As Double)\n    price = price * (1 - rate)\nEnd Sub\n\nSub Demo()\n    Dim p As Double: p = 100\n    Discount p, 0.1 ' p becomes 90\nEnd Sub\n\nFunction Concat(Optional sep As String = \", \", ParamArray items() As Variant) As String\n    Dim i As Long\n    For i = LBound(items) To UBound(items)\n        Concat = Concat & IIf(Len(Concat) &gt; 0, sep, \"\") & CStr(items(i))\n    Next\nEnd Function\n\nByRef: caller’s variable is modified; ByVal: copy only\nOptional parameters and ParamArray for flexible APIs"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#strings-and-dates",
    "href": "slides/vba/03-vba-programming-basics.html#strings-and-dates",
    "title": "Introduction to VBA and Python",
    "section": "Strings and dates",
    "text": "Strings and dates\nDim s As String: s = Trim$(UCase$(\"  hello  \")) ' \"HELLO\"\nDim d As Date: d = DateSerial(2025, 9, 15) + TimeSerial(9, 30, 0)\nDebug.Print Format$(d, \"yyyy-mm-dd hh:nn\")\n\nUse $-suffixed functions (e.g., Trim$) for string-returning variants\nPrefer DateSerial, TimeSerial for safe construction; Format$ for display"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#type-conversion-and-validation",
    "href": "slides/vba/03-vba-programming-basics.html#type-conversion-and-validation",
    "title": "Introduction to VBA and Python",
    "section": "Type conversion and validation",
    "text": "Type conversion and validation\nDim v As Variant, n As Double\nv = Range(\"B1\").Value\nIf IsNumeric(v) Then n = CDbl(v) Else n = 0\n\nGuard conversions with IsNumeric, IsDate, IsError\nCStr, CLng, CDbl, CDate for explicit casts"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#loop-patterns-for-for-each-do-while",
    "href": "slides/vba/03-vba-programming-basics.html#loop-patterns-for-for-each-do-while",
    "title": "Introduction to VBA and Python",
    "section": "Loop patterns: For, For Each, Do While",
    "text": "Loop patterns: For, For Each, Do While\n' For loop with counter\nDim i As Long\nFor i = 1 To 10\n    Cells(i, 1).Value = i\nNext i\n\n' For Each over a range (safer for collections)\nDim c As Range\nFor Each c In Range(\"A1:A10\")\n    c.Value = c.Row\nNext c\n\n' Do While with guard\nDim k As Long: k = 1\nDo While k &lt;= 10\n    Cells(k, 2).Value = k * 2\n    k = k + 1\nLoop"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#branching-if-vs-select-case",
    "href": "slides/vba/03-vba-programming-basics.html#branching-if-vs-select-case",
    "title": "Introduction to VBA and Python",
    "section": "Branching: If vs Select Case",
    "text": "Branching: If vs Select Case\n\n\nIf..ElseIf..Else\nIf qty = 0 Then\n    MsgBox \"Empty\"\nElseIf qty &lt; 10 Then\n    MsgBox \"Low\"\nElse\n    MsgBox \"OK\"\nEnd If\n\nSelect Case\nSelect Case UCase$(Range(\"B1\").Value)\nCase \"N\": MsgBox \"North\"\nCase \"S\": MsgBox \"South\"\nCase Else: MsgBox \"Other\"\nEnd Select"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#finding-last-column",
    "href": "slides/vba/03-vba-programming-basics.html#finding-last-column",
    "title": "Introduction to VBA and Python",
    "section": "Finding last column",
    "text": "Finding last column\nDim lastCol As Long\nlastCol = Cells(1, Columns.Count).End(xlToLeft).Column"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#specialcells-for-speed",
    "href": "slides/vba/03-vba-programming-basics.html#specialcells-for-speed",
    "title": "Introduction to VBA and Python",
    "section": "SpecialCells for speed",
    "text": "SpecialCells for speed\nDim vis As Range\nOn Error Resume Next\nSet vis = Range(\"A1:A1000\").SpecialCells(xlCellTypeVisible)\nOn Error GoTo 0\nIf Not vis Is Nothing Then vis.Value = \"X\"\n\nUse after filters; also useful: xlCellTypeConstants, xlCellTypeFormulas"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#sorting-and-filtering",
    "href": "slides/vba/03-vba-programming-basics.html#sorting-and-filtering",
    "title": "Introduction to VBA and Python",
    "section": "Sorting and filtering",
    "text": "Sorting and filtering\nWith Range(\"A1\").CurrentRegion\n    .Sort Key1:=.Columns(1), Order1:=xlAscending, Header:=xlYes\n    .AutoFilter Field:=2, Criteria1:\"&gt;=100\"\nEnd With\n\nPrefer operating on CurrentRegion/table ranges"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#image-credits-1",
    "href": "slides/vba/01-intro-vba.html#image-credits-1",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Image credits",
    "text": "Image credits\n\nExcel (Windows) UI screenshot: https://upload.wikimedia.org/wikipedia/en/a/a8/Excel_2010.png — Microsoft product screenshot via Wikipedia. Used with permission from Microsoft. No modifications beyond resizing.\nExcel (Mac) UI screenshot: https://upload.wikimedia.org/wikipedia/en/a/ab/Excel_for_Mac_screenshot.png — Microsoft product screenshot via Wikipedia. Used with permission from Microsoft. No modifications beyond resizing.\nVisual Basic Editor screenshot: https://learn.microsoft.com/en-us/office/vba/images/5d9acd78-5168-4a0c-83b6-3f1e440bf649.png — Microsoft Learn. Used with permission from Microsoft. No modifications beyond resizing."
  },
  {
    "objectID": "slides/vba/02-vba-platforms-macros.html#exercise-cleanup-report-1",
    "href": "slides/vba/02-vba-platforms-macros.html#exercise-cleanup-report-1",
    "title": "VBA Session 2 — Macros, Platforms, and Productivity",
    "section": "Exercise: cleanup report",
    "text": "Exercise: cleanup report\n\nOpen a messy sheet; record cleanup\nRefactor to parameterize sheet/ranges\nAdd error handling and performance guards"
  },
  {
    "objectID": "slides/vba/02-vba-platforms-macros.html#case-study-crossplatform-export-1",
    "href": "slides/vba/02-vba-platforms-macros.html#case-study-crossplatform-export-1",
    "title": "VBA Session 2 — Macros, Platforms, and Productivity",
    "section": "Case study: cross‑platform export",
    "text": "Case study: cross‑platform export\n\nRequirement: Export active sheet as CSV to Desktop\nDesign: path helper + SaveAs wrapper + logging"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#next-steps-preview-1",
    "href": "slides/vba/03-vba-programming-basics.html#next-steps-preview-1",
    "title": "Introduction to VBA and Python",
    "section": "Next steps preview",
    "text": "Next steps preview\n\nUserForms, Events, Class modules"
  },
  {
    "objectID": "slides/vba/03-vba-programming-basics.html#section",
    "href": "slides/vba/03-vba-programming-basics.html#section",
    "title": "Introduction to VBA and Python",
    "section": "—",
    "text": "—"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#information",
    "href": "slides/vba/01-intro-vba.html#information",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Information",
    "text": "Information\n\nJuan F. Imbet, Assistant Professor of Finance.\njuan.imbet@dauphine.psl.eu\nOffice: P606\nOffice hours by appointment"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#bit-about-me",
    "href": "slides/vba/01-intro-vba.html#bit-about-me",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Bit about me",
    "text": "Bit about me\n\nEngineering background, PhD in Finance (Pompeu Fabra University)\nResearch in Asset Pricing, Corporate Finance, Asset Management, and Computational Finance.\nTeaching in Finance Theory, Programming, and Artificial Intelligence.\nConsulting Private Equity Firms in implementing AI enhanced investment processes."
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#grading",
    "href": "slides/vba/01-intro-vba.html#grading",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Grading",
    "text": "Grading\n\nGroup Project 40% (topic joint with Aymeric Kalife’s class, 100% Python)\nFinal Exam 50% (less focus on exact syntax, more on concepts and problem solving)\nClass Participation 10%"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#disadvantages-of-vba",
    "href": "slides/vba/01-intro-vba.html#disadvantages-of-vba",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Disadvantages of VBA",
    "text": "Disadvantages of VBA\n\nOld language (from 1993); lacks modern features (e.g., no classes, limited error handling).\nNot easy to debug or test.\nGrammar is not the most friendly."
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#relative-references",
    "href": "slides/vba/01-intro-vba.html#relative-references",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Relative References",
    "text": "Relative References\n\nRelative References toggle (Windows/Mac) controls whether recorded actions use absolute cell references (e.g., Range(\"A1\")) or relative to the active cell (e.g., ActiveCell.Offset(0, 0)).\nUse the Use Relative References button on the Developer tab before starting to record."
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#debugging",
    "href": "slides/vba/01-intro-vba.html#debugging",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Debugging",
    "text": "Debugging\n\nLarge programs rarely run perfectly the first time.\nUnderstanding the values that variables take at different points in execution is key to finding and fixing bugs.\nTo write something in the debugging output window, use Debug.Print.\nThis output can be viewed in the Immediate Window (Ctrl+G in Windows or Cmd+G in Mac)."
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#conditionals",
    "href": "slides/vba/01-intro-vba.html#conditionals",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Conditionals",
    "text": "Conditionals\n\n\nIf…Then\nIf Range(\"A1\").Value &gt; 0 Then\n    MsgBox \"Positive\"\nElse\n    MsgBox \"Non‑positive\"\nEnd If\n\nGreat for simple conditions and ranges\n\n\nSelect Case\nSelect Case Range(\"B1\").Value\n    Case \"A\", \"B\": MsgBox \"Group 1\"\n    Case \"C\": MsgBox \"Group 2\"\n    Case Else: MsgBox \"Other\"\nEnd Select\n\nCleaner than nested Ifs for discrete categories"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#how-to-inspect-variables-live",
    "href": "slides/vba/01-intro-vba.html#how-to-inspect-variables-live",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "How to inspect variables live",
    "text": "How to inspect variables live\n\nUse the Locals window (View → Locals Window) to see all local variables and their current values when paused at a breakpoint.\nNot all variables may have their values shown in the Locals window, especially if they are complex objects or if the code is not currently within the scope where the variable is defined.\n\nSub Trace()\n   Dim c As Long\n    For c = 1 To 10\n        c = c + 1\n    Next c\nEnd Sub\n\nTip: Reproduce fast; isolate into small test Subs; comment out non-essential code while debugging"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#subs-vs-functions-user-defined-functions---udfs",
    "href": "slides/vba/01-intro-vba.html#subs-vs-functions-user-defined-functions---udfs",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Subs vs Functions (User Defined Functions - UDFs)",
    "text": "Subs vs Functions (User Defined Functions - UDFs)\n' Sub performs actions\nSub ClearData()\n    Worksheets(\"Sheet1\").Range(\"A2:D1000\").ClearContents\nEnd Sub\n\n' Function returns a value (UDF) name the variable that captures the return value as the function name\nPublic Function AddTax(amount As Double, rate As Double) As Double\n    AddTax = amount * (1 + rate)\nEnd Function\n\nSub: run from VBE, buttons, or macros dialog; can modify workbook state\nFunction: returns a value; can be used in worksheet cells as a UDF\nUDF caveats: should be pure (function of inputs only); avoid side effects (changing sheets)\nFor security UDFs are not allowed to modify the Excel environment (e.g., changing cell values, formatting, or interacting with other applications). They should only compute and return values based on their input parameters."
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#the-workbook-worksheet-and-worksheetfunction-objects",
    "href": "slides/vba/01-intro-vba.html#the-workbook-worksheet-and-worksheetfunction-objects",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "The Workbook, Worksheet and WorksheetFunction objects",
    "text": "The Workbook, Worksheet and WorksheetFunction objects\n\nEach workbook and worksheet has its own code module (ThisWorkbook, Sheet1, etc.)\nThey allow access to events (open, close, change, etc.)\nThey also allow access to standard excel formulas.\nUse ThisWorkbook to refer to the workbook containing the code.\nSome common events:\n\nWorkbook_Open: runs when the workbook opens\nWorkbook_BeforeClose: runs before the workbook closes\nWorksheet_Change: runs when a cell value changes in that sheet\n\nThis is the main reason why Office applications ask to enable macros when opening files with VBA code.\n\nPrivate Sub Workbook_Open()\n    MsgBox \"Welcome!\"\nEnd Sub"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#access-to-standard-excel-formulas",
    "href": "slides/vba/01-intro-vba.html#access-to-standard-excel-formulas",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Access to standard Excel formulas",
    "text": "Access to standard Excel formulas\nSub UseExcelFunction()\n    Dim result As Double\n    result = Application.WorksheetFunction.Sum(Range(\"A1:A10\"))\n    MsgBox \"Sum is \" & result\nEnd Sub\n---\n\n## Win vs Mac differences (overview)\n\n- Shortcuts (Alt vs Option), some dialogs differ\n- File system paths differ\n- Many object model calls are the same\n\nDetails that matter:\n- Paths: Windows uses `C:\\Users\\...\\file.xlsx`; Mac uses `/Users/you/file.xlsx`; combine with `Application.PathSeparator`\n- File dialogs: `Application.FileDialog(msoFileDialogFilePicker)` works on both, but filters and default folders behave slightly differently\n- API calls: Windows allows `Declare PtrSafe Function` to call Win32 APIs; Mac lacks Win32 — avoid OS API calls for portability\n- Add‑ins: `.xlam` works both; COM add‑ins are Windows‑only\n\n---\n\n## Error handling basics\n\n```vb\nSub DoWork()\n    On Error GoTo CleanUp ' jump to CleanUp on error\n    ' ... risky code here ...\n\nDone:\n    ' What to do when done\n    Exit Sub\n\nCleanUp:\n    MsgBox \"Error \" & Err.Number & \": \" & Err.Description, vbExclamation, \"DoWork\"\n    Resume Done\nEnd Sub\n\nStart simple; add structure as you grow"
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#variable-types",
    "href": "slides/vba/01-intro-vba.html#variable-types",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Variable Types",
    "text": "Variable Types\n\nInteger: -32,768 to 32,767 (2 bytes)\nLong: -2,147,483,648 to 2,147,483,647 (4 bytes)\nSingle: Single-precision floating point (4 bytes)\nDouble: Double-precision floating point (8 bytes)\nString: Text (up to ~2 billion characters)\nBoolean: True/False (2 bytes)\nDate: Dates and times (8 bytes)\nVariant: Can hold any type; default if no type specified (16 bytes + data)\nPrefer explicit types for clarity and performance; Variant is flexible but slower and uses more memory\nNot all types are available on Mac."
  },
  {
    "objectID": "slides/vba/01-intro-vba.html#your-first-serious-program-exercise-in-class",
    "href": "slides/vba/01-intro-vba.html#your-first-serious-program-exercise-in-class",
    "title": "VBA Session 1 — Introduction to VBA",
    "section": "Your first serious program (exercise in class)",
    "text": "Your first serious program (exercise in class)\n\nFor your first exercise you are going to estimate the value of \\(\\pi\\) using a Monte Carlo method.\nImagin e a square of side 2 (from -1 to 1 in both x and y) that contains a circle of radius 1.\nThe area of the square is 4, and the area of the circle is \\(\\pi\\).\nYou are going to randomly generate points in the square, and count how many fall inside the circle as a fraction of the total points.\nThis fraction multiplied by 4 will give you an estimate of \\(\\pi\\).\n\nYour task - Create a UDF EstimatePi(n As Long) As Double that takes the number of random points to generate as input, and returns the estimate of \\(\\pi\\). - Use x = Rnd to generate random numbers between 0 and 1; scale it to -1 to 1. - Return the estimate. - Your function should be available in the worksheet as e.g. =EstimatePi(10000).\nFunction EstimatePi(n As Long) As Double\n    ' your code here\nEnd Function"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#numpy-history-and-motivation",
    "href": "slides/python/04-numpy-pandas.html#numpy-history-and-motivation",
    "title": "Introduction to Numpy and Pandas",
    "section": "NumPy: History and Motivation",
    "text": "NumPy: History and Motivation\n\nCreated in 2005 by Travis Oliphant, building on Numeric and Numarray\nProblem: Python lists are flexible but slow for numerical computations\nSolution: NumPy provides efficient array operations in C\nUsed by: Pandas, SciPy, scikit-learn, and most scientific Python libraries\nKey advantage: Vectorized operations eliminate slow Python loops"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#why-numpy-arrays-are-faster-than-lists",
    "href": "slides/python/04-numpy-pandas.html#why-numpy-arrays-are-faster-than-lists",
    "title": "Introduction to Numpy and Pandas",
    "section": "Why NumPy Arrays are Faster than Lists",
    "text": "Why NumPy Arrays are Faster than Lists\n\nHomogeneous types: All elements have the same type (no type checking overhead)\nContiguous memory: Data stored in adjacent memory locations\nC implementation: Core operations written in optimized C code\nVectorization: Operations applied to entire arrays at once\nNo Python object overhead: Direct access to raw data\n\nimport numpy as np\nimport time\n\n# Python list\npython_list = list(range(1000000))\nstart = time.time()\nresult = [x * 2 for x in python_list]\nprint(f\"Python list: {time.time() - start:.4f}s\")\n\n# NumPy array\nnumpy_array = np.arange(1000000)\nstart = time.time()\nresult = numpy_array * 2\nprint(f\"NumPy array: {time.time() - start:.4f}s\")"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#numpy-data-types",
    "href": "slides/python/04-numpy-pandas.html#numpy-data-types",
    "title": "Introduction to Numpy and Pandas",
    "section": "NumPy Data Types",
    "text": "NumPy Data Types\n\nIntegers: int8, int16, int32, int64 (signed), uint8, uint16, etc. (unsigned)\nFloats: float16, float32, float64 (default)\nComplex: complex64, complex128\nBoolean: bool_\nMemory efficiency: Choose appropriate type for your data\n\nimport numpy as np\n\n# Explicitly specify data type\narr_int = np.array([1, 2, 3], dtype=np.int32)\narr_float = np.array([1.0, 2.0, 3.0], dtype=np.float64)\n\nprint(f\"Integer array uses: {arr_int.itemsize} bytes per element\")\nprint(f\"Float array uses: {arr_float.itemsize} bytes per element\")"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#arrays-of-different-dimensions",
    "href": "slides/python/04-numpy-pandas.html#arrays-of-different-dimensions",
    "title": "Introduction to Numpy and Pandas",
    "section": "Arrays of Different Dimensions",
    "text": "Arrays of Different Dimensions\n\n0D (scalar): Single value\n1D (vector): List of values [1, 2, 3]\n2D (matrix): Rows and columns [[1, 2], [3, 4]]\n3D and beyond: Tensors for complex data structures\nShape attribute: Returns dimensions as tuple\n\nimport numpy as np\n\nscalar = np.array(42)\nvector = np.array([1, 2, 3, 4])\nmatrix = np.array([[1, 2, 3], [4, 5, 6]])\ntensor = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])\n\nprint(f\"Scalar shape: {scalar.shape}\")  # ()\nprint(f\"Vector shape: {vector.shape}\")  # (4,)\nprint(f\"Matrix shape: {matrix.shape}\")  # (2, 3)\nprint(f\"Tensor shape: {tensor.shape}\")  # (2, 2, 2)"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#creating-numpy-arrays",
    "href": "slides/python/04-numpy-pandas.html#creating-numpy-arrays",
    "title": "Introduction to Numpy and Pandas",
    "section": "Creating NumPy Arrays",
    "text": "Creating NumPy Arrays\nimport numpy as np\n\n# From Python list\narr1 = np.array([1, 2, 3, 4, 5])\n\n# Range of values\narr2 = np.arange(0, 10, 2)  # [0, 2, 4, 6, 8]\n\n# Evenly spaced values\narr3 = np.linspace(0, 1, 5)  # [0.0, 0.25, 0.5, 0.75, 1.0]\n\n# Zeros and ones\nzeros = np.zeros((3, 4))\nones = np.ones((2, 3))\n\n# Random values\nrandom_arr = np.random.rand(3, 3)  # Uniform [0, 1)\nnormal_arr = np.random.randn(3, 3)  # Standard normal"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#operations-between-arrays-element-wise",
    "href": "slides/python/04-numpy-pandas.html#operations-between-arrays-element-wise",
    "title": "Introduction to Numpy and Pandas",
    "section": "Operations Between Arrays: Element-wise",
    "text": "Operations Between Arrays: Element-wise\n\nArithmetic: +, -, *, /, ** applied element-by-element\nBroadcasting: Operations between arrays of different shapes\nNo loops needed: All operations vectorized\nMuch faster: Than iterating through Python lists\nIntuitive syntax: Mathematical operations look natural\n\nimport numpy as np\n\na = np.array([1, 2, 3, 4])\nb = np.array([10, 20, 30, 40])\n\n# Element-wise operations\nprint(a + b)    # [11, 22, 33, 44]\nprint(a * b)    # [10, 40, 90, 160]\nprint(a ** 2)   # [1, 4, 9, 16]\nprint(b / a)    # [10.0, 10.0, 10.0, 10.0]"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#broadcasting-rules",
    "href": "slides/python/04-numpy-pandas.html#broadcasting-rules",
    "title": "Introduction to Numpy and Pandas",
    "section": "Broadcasting Rules",
    "text": "Broadcasting Rules\nimport numpy as np\n\n# Broadcasting: scalar with array\narr = np.array([1, 2, 3, 4])\nresult = arr + 10  # [11, 12, 13, 14]\n\n# Broadcasting: different shapes\nmatrix = np.array([[1, 2, 3], [4, 5, 6]])\nvector = np.array([10, 20, 30])\nresult = matrix + vector  \n# [[11, 22, 33],\n#  [14, 25, 36]]\n\n# Broadcasting: column vector\ncol_vector = np.array([[1], [2]])\nresult = matrix + col_vector\n# [[2, 3, 4],\n#  [6, 7, 8]]"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#matrix-operations",
    "href": "slides/python/04-numpy-pandas.html#matrix-operations",
    "title": "Introduction to Numpy and Pandas",
    "section": "Matrix Operations",
    "text": "Matrix Operations\nimport numpy as np\n\nA = np.array([[1, 2], [3, 4]])\nB = np.array([[5, 6], [7, 8]])\n\n# Element-wise multiplication\nelementwise = A * B  # [[5, 12], [21, 32]]\n\n# Matrix multiplication (dot product)\nmatmul1 = A @ B      # [[19, 22], [43, 50]]\nmatmul2 = np.dot(A, B)  # Same result\n\n# Transpose\nA_T = A.T  # [[1, 3], [2, 4]]\n\n# Inverse (for square matrices)\nA_inv = np.linalg.inv(A)"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#useful-numpy-functions",
    "href": "slides/python/04-numpy-pandas.html#useful-numpy-functions",
    "title": "Introduction to Numpy and Pandas",
    "section": "Useful NumPy Functions",
    "text": "Useful NumPy Functions\nimport numpy as np\n\narr = np.array([[1, 2, 3], [4, 5, 6]])\n\n# Statistical functions\nprint(np.mean(arr))        # 3.5\nprint(np.std(arr))         # 1.707...\nprint(np.sum(arr))         # 21\nprint(np.sum(arr, axis=0)) # [5, 7, 9] (sum columns)\nprint(np.sum(arr, axis=1)) # [6, 15] (sum rows)\n\n# Other useful functions\nprint(np.max(arr))         # 6\nprint(np.argmax(arr))      # 5 (index of max)\nprint(np.sqrt(arr))        # Element-wise square root"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#what-is-pandas",
    "href": "slides/python/04-numpy-pandas.html#what-is-pandas",
    "title": "Introduction to Numpy and Pandas",
    "section": "What is Pandas?",
    "text": "What is Pandas?\n\nCreated in 2008 by Wes McKinney\nName from: “Panel Data” - econometric term for multidimensional data\nPurpose: Data manipulation and analysis tool\nBuilt on NumPy: Uses NumPy arrays under the hood\nKey structures: Series (1D) and DataFrame (2D)"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#pandas-is-built-on-numpy",
    "href": "slides/python/04-numpy-pandas.html#pandas-is-built-on-numpy",
    "title": "Introduction to Numpy and Pandas",
    "section": "Pandas is Built on NumPy",
    "text": "Pandas is Built on NumPy\n\nSeries: 1D labeled array backed by NumPy array\nDataFrame: 2D labeled data structure with NumPy arrays for each column\nInherits speed: Vectorized operations from NumPy\nAdds flexibility: Labels, missing data handling, heterogeneous types\nBest of both worlds: NumPy speed + high-level data manipulation\n\nimport pandas as pd\nimport numpy as np\n\n# Creating a Series from NumPy array\narr = np.array([10, 20, 30, 40])\nseries = pd.Series(arr, index=['a', 'b', 'c', 'd'])\n\n# Accessing underlying NumPy array\nprint(series.values)  # NumPy array: [10 20 30 40]\nprint(type(series.values))  # &lt;class 'numpy.ndarray'&gt;"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#creating-dataframes",
    "href": "slides/python/04-numpy-pandas.html#creating-dataframes",
    "title": "Introduction to Numpy and Pandas",
    "section": "Creating DataFrames",
    "text": "Creating DataFrames\nimport pandas as pd\nimport numpy as np\n\n# From dictionary\ndf1 = pd.DataFrame({\n    'name': ['Alice', 'Bob', 'Charlie'],\n    'age': [25, 30, 35],\n    'salary': [50000, 60000, 70000]\n})\n\n# From NumPy array\ndata = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndf2 = pd.DataFrame(data, columns=['A', 'B', 'C'])\n\n# From CSV file\ndf3 = pd.read_csv('data.csv')\n\n# Basic info\nprint(df1.head())      # First 5 rows\nprint(df1.info())      # Data types and memory\nprint(df1.describe())  # Statistical summary"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#operations-between-columns",
    "href": "slides/python/04-numpy-pandas.html#operations-between-columns",
    "title": "Introduction to Numpy and Pandas",
    "section": "Operations Between Columns",
    "text": "Operations Between Columns\n\nArithmetic operations: Just like NumPy arrays\nApply functions: Use .apply() for custom operations\nVectorized: All operations are fast and efficient\nCreate new columns: Assign results to new column names\nCombine columns: Mathematical or logical operations\n\nimport pandas as pd\n\ndf = pd.DataFrame({\n    'price': [100, 200, 150],\n    'quantity': [10, 5, 8],\n    'discount': [0.1, 0.2, 0.15]\n})\n\n# Create new columns from operations\ndf['total'] = df['price'] * df['quantity']\ndf['discounted_price'] = df['price'] * (1 - df['discount'])\ndf['revenue'] = df['discounted_price'] * df['quantity']\n\n# Apply function to column\ndf['price_category'] = df['price'].apply(\n    lambda x: 'High' if x &gt; 150 else 'Low'\n)"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#selecting-rows-index-based",
    "href": "slides/python/04-numpy-pandas.html#selecting-rows-index-based",
    "title": "Introduction to Numpy and Pandas",
    "section": "Selecting Rows: Index-Based",
    "text": "Selecting Rows: Index-Based\n\n.loc[]: Label-based indexing\n.iloc[]: Integer position-based indexing\nSingle row: Returns a Series\nMultiple rows: Returns a DataFrame\nSlicing: Select ranges of rows\n\nimport pandas as pd\n\ndf = pd.DataFrame({\n    'name': ['Alice', 'Bob', 'Charlie', 'David'],\n    'age': [25, 30, 35, 40],\n    'city': ['Paris', 'London', 'Berlin', 'Madrid']\n}, index=['A', 'B', 'C', 'D'])\n\n# Label-based selection\nprint(df.loc['A'])           # Single row (Series)\nprint(df.loc[['A', 'C']])    # Multiple rows (DataFrame)\nprint(df.loc['A':'C'])       # Slice (inclusive)\n\n# Position-based selection\nprint(df.iloc[0])            # First row\nprint(df.iloc[[0, 2]])       # First and third rows\nprint(df.iloc[1:3])          # Rows 1 and 2 (exclusive end)"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#selecting-rows-logical-conditions",
    "href": "slides/python/04-numpy-pandas.html#selecting-rows-logical-conditions",
    "title": "Introduction to Numpy and Pandas",
    "section": "Selecting Rows: Logical Conditions",
    "text": "Selecting Rows: Logical Conditions\n\nBoolean indexing: Use logical conditions to filter rows\nMultiple conditions: Combine with & (and), | (or), ~ (not)\n.isin(): Check if values are in a list\n.between(): Check if values are in a range\nQuery method: String-based filtering for cleaner syntax\n\nimport pandas as pd\n\ndf = pd.DataFrame({\n    'name': ['Alice', 'Bob', 'Charlie', 'David'],\n    'age': [25, 30, 35, 40],\n    'salary': [50000, 60000, 55000, 75000]\n})\n\n# Single condition\nyoung = df[df['age'] &lt; 35]\n\n# Multiple conditions (use parentheses!)\nfiltered = df[(df['age'] &gt; 25) & (df['salary'] &gt; 55000)]\n\n# isin method\nselected = df[df['name'].isin(['Alice', 'Charlie'])]\n\n# Query method\nresult = df.query('age &gt; 30 and salary &lt; 70000')"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#groupby-operations-the-split-apply-combine-pattern",
    "href": "slides/python/04-numpy-pandas.html#groupby-operations-the-split-apply-combine-pattern",
    "title": "Introduction to Numpy and Pandas",
    "section": "GroupBy Operations: The Split-Apply-Combine Pattern",
    "text": "GroupBy Operations: The Split-Apply-Combine Pattern\n\nSplit: Divide data into groups based on criteria\nApply: Perform operations on each group independently\nCombine: Aggregate results back into a data structure\nCommon aggregations: sum(), mean(), count(), min(), max()\nPowerful tool: Essential for data analysis\n\nimport pandas as pd\n\ndf = pd.DataFrame({\n    'department': ['Sales', 'IT', 'Sales', 'IT', 'HR'],\n    'employee': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],\n    'salary': [50000, 60000, 55000, 65000, 52000]\n})\n\n# Group by department and calculate mean salary\navg_salary = df.groupby('department')['salary'].mean()\n\n# Multiple aggregations\nstats = df.groupby('department').agg({\n    'salary': ['mean', 'min', 'max', 'count']\n})\n\n# Apply custom function\ndf.groupby('department')['salary'].apply(lambda x: x.max() - x.min())"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#advanced-groupby-examples",
    "href": "slides/python/04-numpy-pandas.html#advanced-groupby-examples",
    "title": "Introduction to Numpy and Pandas",
    "section": "Advanced GroupBy Examples",
    "text": "Advanced GroupBy Examples\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({\n    'date': pd.date_range('2025-01-01', periods=100),\n    'product': np.random.choice(['A', 'B', 'C'], 100),\n    'region': np.random.choice(['North', 'South'], 100),\n    'sales': np.random.randint(100, 1000, 100)\n})\n\n# Group by multiple columns\nmulti_group = df.groupby(['product', 'region'])['sales'].sum()\n\n# Transform: keep original shape\ndf['pct_of_product_total'] = df.groupby('product')['sales'].transform(\n    lambda x: x / x.sum()\n)\n\n# Filter groups\nhigh_sales = df.groupby('product').filter(\n    lambda x: x['sales'].sum() &gt; 10000\n)"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#exercise-titanic-dataset-analysis",
    "href": "slides/python/04-numpy-pandas.html#exercise-titanic-dataset-analysis",
    "title": "Introduction to Numpy and Pandas",
    "section": "Exercise: Titanic Dataset Analysis",
    "text": "Exercise: Titanic Dataset Analysis\nDataset: Titanic passenger data from Kaggle\nDataset: Titanic passenger data from Kaggle\nTasks: 1. Load the data and explore its structure 2. Calculate survival rates by passenger class 3. Find average age by gender and survival status 4. Identify which deck had the highest survival rate 5. Create a new feature combining age groups and class\nYou will practice: - Loading data with Pandas - Selecting rows and columns - GroupBy operations - Creating new features"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#loading-and-exploring-the-data",
    "href": "slides/python/04-numpy-pandas.html#loading-and-exploring-the-data",
    "title": "Introduction to Numpy and Pandas",
    "section": "Loading and Exploring the Data",
    "text": "Loading and Exploring the Data\nimport pandas as pd\nimport numpy as np\n\n# Load the Titanic dataset\ndf = pd.read_csv('titanic.csv')\n\n# Explore the structure\nprint(df.head())\nprint(df.info())\nprint(df.describe())\n\n# Check for missing values\nprint(df.isnull().sum())\n\n# Basic statistics\nprint(f\"Total passengers: {len(df)}\")\nprint(f\"Survival rate: {df['Survived'].mean():.2%}\")\nprint(f\"\\nPassengers per class:\")\nprint(df['Pclass'].value_counts().sort_index())"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#solution-part-1-survival-by-class",
    "href": "slides/python/04-numpy-pandas.html#solution-part-1-survival-by-class",
    "title": "Introduction to Numpy and Pandas",
    "section": "Solution Part 1: Survival by Class",
    "text": "Solution Part 1: Survival by Class\n# Task 1: Calculate survival rates by passenger class\nsurvival_by_class = df.groupby('Pclass')['Survived'].agg([\n    ('count', 'count'),\n    ('survived', 'sum'),\n    ('survival_rate', 'mean')\n])\n\nprint(\"Survival rates by class:\")\nprint(survival_by_class)\n\n# Visualization insight:\n# 1st class: ~63% survival\n# 2nd class: ~47% survival  \n# 3rd class: ~24% survival\n# Clear pattern: higher class = higher survival rate"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#solution-part-2-average-age-analysis",
    "href": "slides/python/04-numpy-pandas.html#solution-part-2-average-age-analysis",
    "title": "Introduction to Numpy and Pandas",
    "section": "Solution Part 2: Average Age Analysis",
    "text": "Solution Part 2: Average Age Analysis\n# Task 2: Average age by gender and survival status\nage_analysis = df.groupby(['Sex', 'Survived'])['Age'].mean()\nprint(\"\\nAverage age by gender and survival:\")\nprint(age_analysis)\n\n# More detailed view\nage_detail = df.groupby(['Sex', 'Survived']).agg({\n    'Age': ['mean', 'median', 'std', 'count']\n})\nprint(\"\\nDetailed age statistics:\")\nprint(age_detail)\n\n# Insight: Women and children first policy visible in data\n# Younger passengers more likely to survive"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#solution-part-3-survival-by-deck",
    "href": "slides/python/04-numpy-pandas.html#solution-part-3-survival-by-deck",
    "title": "Introduction to Numpy and Pandas",
    "section": "Solution Part 3: Survival by Deck",
    "text": "Solution Part 3: Survival by Deck\n# Task 3: Survival rate by deck (extracted from Cabin)\n# First, extract deck letter from Cabin\ndf['Deck'] = df['Cabin'].str[0]\n\n# Calculate survival rates by deck\ndeck_survival = df.groupby('Deck')['Survived'].agg([\n    'count', 'mean'\n]).sort_values('mean', ascending=False)\n\nprint(\"\\nSurvival rates by deck:\")\nprint(deck_survival)\n\n# Filter out decks with few passengers for more reliable statistics\nreliable_decks = deck_survival[deck_survival['count'] &gt;= 10]\nprint(\"\\nDecks with 10+ passengers:\")\nprint(reliable_decks)"
  },
  {
    "objectID": "slides/python/04-numpy-pandas.html#solution-part-4-feature-engineering",
    "href": "slides/python/04-numpy-pandas.html#solution-part-4-feature-engineering",
    "title": "Introduction to Numpy and Pandas",
    "section": "Solution Part 4: Feature Engineering",
    "text": "Solution Part 4: Feature Engineering\n# Task 4: Create age groups and combine with class\n# Define age groups\ndef categorize_age(age):\n    if pd.isna(age):\n        return 'Unknown'\n    elif age &lt; 18:\n        return 'Child'\n    elif age &lt; 35:\n        return 'Young Adult'\n    elif age &lt; 60:\n        return 'Adult'\n    else:\n        return 'Senior'\n\ndf['Age_Group'] = df['Age'].apply(categorize_age)\n\n# Combine with passenger class\ndf['Class_Age_Group'] = (df['Pclass'].astype(str) + '_' + \n                          df['Age_Group'])\n\n# Analyze survival by this new feature\nsurvival_by_combo = df.groupby('Class_Age_Group')['Survived'].agg([\n    'count', 'mean'\n]).sort_values('mean', ascending=False)\n\nprint(\"\\nSurvival rates by class and age group:\")\nprint(survival_by_combo.head(10))"
  }
]