---
title: "VBA Session 3 — Programming Basics"
subtitle: "Routines, variables, functions, references, loops, conditionals, I/O"
author: "Juan F. Imbet"
institute: "Paris Dauphine University-PSL"
format:
    revealjs:
        slide-level: 1
include-in-header:
    - ../../tikzjax.html
---
 
---

## Procedures: Subs and Functions

::: columns
::: column
Subroutines (Subs)

```vb
Sub Greet()
    MsgBox "Welcome!"
End Sub
```

- Keep them short and focused
:::
::: column
Functions

```vb
Function NetPrice(price As Double, tax As Double) As Double
    NetPrice = price * (1 + tax)
End Function
```

- Can be used in cells too
:::
:::

---

## Procedure signatures: ByRef/ByVal, Optional, ParamArray

```vb
Sub Discount(ByRef price As Double, ByVal rate As Double)
    price = price * (1 - rate)
End Sub

Sub Demo()
    Dim p As Double: p = 100
    Discount p, 0.1 ' p becomes 90
End Sub

Function Concat(Optional sep As String = ", ", ParamArray items() As Variant) As String
    Dim i As Long
    For i = LBound(items) To UBound(items)
        Concat = Concat & IIf(Len(Concat) > 0, sep, "") & CStr(items(i))
    Next
End Function
```

- `ByRef`: caller’s variable is modified; `ByVal`: copy only
- Optional parameters and `ParamArray` for flexible APIs

---

## Variables and constants

```vb
Dim qty As Long
Const TaxRate As Double = 0.16
```

- Constants express business rules clearly

---

## Strings and dates

```vb
Dim s As String: s = Trim$(UCase$("  hello  ")) ' "HELLO"
Dim d As Date: d = DateSerial(2025, 9, 15) + TimeSerial(9, 30, 0)
Debug.Print Format$(d, "yyyy-mm-dd hh:nn")
```

- Use `$`-suffixed functions (e.g., `Trim$`) for string-returning variants
- Prefer `DateSerial`, `TimeSerial` for safe construction; `Format$` for display

---

## Type conversion and validation

```vb
Dim v As Variant, n As Double
v = Range("B1").Value
If IsNumeric(v) Then n = CDbl(v) Else n = 0
```

- Guard conversions with `IsNumeric`, `IsDate`, `IsError`
- `CStr`, `CLng`, `CDbl`, `CDate` for explicit casts

---

## Types recap

- Numeric: Integer/Long/Double/Decimal
- Text: String; True/False: Boolean; Date
- Variant: flexible but slower

---

## Arrays

```vb
Dim arr(1 To 3) As Long
arr(1) = 10: arr(2) = 20: arr(3) = 30
```

- Dynamic arrays with ReDim when needed

---

## Loop patterns: For, For Each, Do While

```vb
' For loop with counter
Dim i As Long
For i = 1 To 10
    Cells(i, 1).Value = i
Next i

' For Each over a range (safer for collections)
Dim c As Range
For Each c In Range("A1:A10")
    c.Value = c.Row
Next c

' Do While with guard
Dim k As Long: k = 1
Do While k <= 10
    Cells(k, 2).Value = k * 2
    k = k + 1
Loop
```

---

## Branching: If vs Select Case

::: columns
::: column
If..ElseIf..Else

```vb
If qty = 0 Then
    MsgBox "Empty"
ElseIf qty < 10 Then
    MsgBox "Low"
Else
    MsgBox "OK"
End If
```
:::
::: column
Select Case

```vb
Select Case UCase$(Range("B1").Value)
Case "N": MsgBox "North"
Case "S": MsgBox "South"
Case Else: MsgBox "Other"
End Select
```
:::
:::

---

## With blocks for clarity

```vb
With Worksheets("Report")
    .Range("A1").Value = "Title"
    .Range("A2").Font.Bold = True
End With
```

- Reduces repetition; groups related actions

---

## Reading/writing ranges fast

```vb
Dim data
Dim rng As Range
Set rng = Range("A1:D1000")
data = rng.Value ' 2D array
' ... process in memory ...
rng.Value = data
```

- Better than cell‑by‑cell loops

---

## Finding last row

```vb
Dim lastRow As Long
lastRow = Cells(Rows.Count, 1).End(xlUp).Row
```

- Common pattern for dynamic ranges

---

## Finding last column

```vb
Dim lastCol As Long
lastCol = Cells(1, Columns.Count).End(xlToLeft).Column
```

---

## SpecialCells for speed

```vb
Dim vis As Range
On Error Resume Next
Set vis = Range("A1:A1000").SpecialCells(xlCellTypeVisible)
On Error GoTo 0
If Not vis Is Nothing Then vis.Value = "X"
```

- Use after filters; also useful: `xlCellTypeConstants`, `xlCellTypeFormulas`

---

## Sorting and filtering

```vb
With Range("A1").CurrentRegion
    .Sort Key1:=.Columns(1), Order1:=xlAscending, Header:=xlYes
    .AutoFilter Field:=2, Criteria1:">=100"
End With
```

- Prefer operating on `CurrentRegion`/table ranges

---

## Interacting with files

```vb
Open "C:\\temp\\out.txt" For Output As #1
Print #1, "Hello file"
Close #1
```

- Prefer built‑in workbook I/O for Excel formats

---

## CSV export

```vb
ActiveSheet.Copy
ActiveWorkbook.SaveAs "C:\\temp\\out.csv", xlCSVUTF8
ActiveWorkbook.Close False
```

---

## Basic error handling template

```vb
Sub Template()
On Error GoTo Fail
    ' work
    Exit Sub
Fail:
    MsgBox Err.Number & ": " & Err.Description
End Sub
```

Add minimal assertions

```vb
Public Sub AssertTrue(ByVal cond As Boolean, ByVal msg As String)
    If Not cond Then Err.Raise vbObjectError + 1000, , msg
End Sub

Sub Test_Assert()
    On Error GoTo Fail
    AssertTrue 1 + 1 = 2, "Math broke"
    MsgBox "OK"
    Exit Sub
Fail:
    MsgBox Err.Description
End Sub
```

---

## InputBox patterns

```vb
Dim n As Variant
n = InputBox("How many rows?", "Input", 10)
If IsNumeric(n) Then Range("A1").Resize(n, 1).Value = 1
```

---

## User‑defined worksheet functions (UDF)

```vb
Function IsPrime(n As Long) As Boolean
    Dim i As Long
    If n < 2 Then Exit Function
    For i = 2 To Sqr(n)
        If n Mod i = 0 Then Exit Function
    Next i
    IsPrime = True
End Function
```

- Use carefully; they recalc often

---

## Clean coding guidelines

- Name procedures VerbNoun (e.g., ExportReport)
- Avoid magic numbers; use Consts
- Keep procedures under ~50 lines when possible

---

## Exercise: data cleanup

- Trim spaces, proper case, remove blanks
- Write helper functions for reuse

---

## Exercise: summary table

- Count by category using loops and dictionary
- Output a clean table to a new sheet

---

<!-- removed by request: analogy content (deleted) -->

---

## Where to go next

- UserForms for UI, Class modules for models
- Interop with Power Query or Python tools

---

## Wrap‑up

- Solid grounding to automate real Excel tasks using VBA

---

## Dictionaries (Scripting.Dictionary)

```vb
Dim d As Object: Set d = CreateObject("Scripting.Dictionary")
d("A") = 1: d("B") = 2
```

- Great for counting/grouping

---

## Timer and performance

```vb
Dim t As Double: t = Timer
' work
MsgBox "Secs: " & Format(Timer - t, "0.00")
```

---

## Modularization

- Small subs that call each other
- Clear inputs/outputs; avoid global state

Pattern: one public entrypoint that calls private helpers

```vb
Public Sub BuildReport()
    PrepareSheet
    LoadData
    FormatReport
End Sub

Private Sub PrepareSheet(): End Sub
Private Sub LoadData(): End Sub
Private Sub FormatReport(): End Sub
```

---

## Testing mindset

- Create a Test sheet; write simple asserts via MsgBox/Debug.Print

---

## Next steps preview
## Next steps preview

- UserForms, Events, Class modules
