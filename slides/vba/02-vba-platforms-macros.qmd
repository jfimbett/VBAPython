---
title: "VBA Session 2 — Macros, Platforms, and Productivity"
subtitle: "Windows vs Mac, recording/refactoring, organizing modules"
author: "Juan F. Imbet"
institute: "Paris Dauphine University-PSL"
format:
  revealjs:
    theme: white
    css: styles.css
    slide-number: true
    chalkboard: true
    preview-links: auto
    footer: "Intro to VBA and Python"
    include-in-header: ../../tikzjax.html
execute:
  enabled: false
---

## Agenda

- Accessing macros on Windows and Mac
- Differences in VBE usage, file paths, dialogs
- Recording, reviewing, and refactoring
- Organizing modules and utilities
 

---

## Accessing macros (Win/Mac)

::: columns
::: column
Windows

- Developer tab → Macros (Alt+F8)
- Assign to buttons, shapes, or shortcuts
- Check Trust Center settings
:::
::: column
Mac

- Developer tab → Macros
- Customize Ribbon & Toolbar for quick access
- Some shortcuts differ
:::
:::

---

## Macro storage locations

- This Workbook vs New Workbook vs Personal Macro Workbook
- Pros/cons for sharing vs personal use

---

## Macro recorder pitfalls

- Records every click → lots of Select/Activate
- Absolute selections → fragile
- Good for learning object references

---

## Refactoring recorded macros

Before:

```vb
Range("A1").Select
ActiveCell.Value = "Header"
```

After:

```vb
Range("A1").Value = "Header"
```

---

## Selecting ranges robustly

```vb
With Worksheets("Data")
    .Range("A1").CurrentRegion.Select 'for exploration only
    .Range("A1").Value = "OK"
End With
```

- Prefer qualified references (.Range) inside With blocks

---

## Named ranges and Tables

- Use structured references for stability
- Tables (ListObjects) are macro‑friendly

```vb
ActiveSheet.ListObjects("Sales").DataBodyRange.Columns(1).Value = 0
```

---

## Win vs Mac: file paths

- Windows: C:\Users\You\Documents\...
- Mac: /Users/you/Documents/...
- Use Application.OperatingSystem to branch when needed

```vb
Public Function IsMac() As Boolean
    IsMac = (InStr(Application.OperatingSystem, "Mac") > 0)
End Function

If InStr(Application.OperatingSystem, "Mac") > 0 Then
    ' Mac path logic
Else
    ' Windows path logic
End If
```

---

## Dialog differences

- File pickers, message boxes, and fonts dialogs differ slightly
- Abstract with small helper functions

```vb
Public Function PickFile(Optional title As String = "Pick a file") As String
    Dim fd As FileDialog
    Set fd = Application.FileDialog(msoFileDialogFilePicker)
    With fd
        .Title = title
        .AllowMultiSelect = False
        If .Show = -1 Then PickFile = .SelectedItems(1)
    End With
End Function
```

---

## Example: Save CSV cross‑platform

```vb
Sub SaveCsv()
    Dim path As String
    path = GetDesktopPath() & Application.PathSeparator & "out.csv"
    ActiveWorkbook.SaveAs Filename:=path, FileFormat:=xlCSVUTF8
End Sub
```

```vb
Public Function GetDesktopPath() As String
    If IsMac() Then
        GetDesktopPath = Environ$("HOME") & "/Desktop"
    Else
        GetDesktopPath = Environ$("USERPROFILE") & "\Desktop"
    End If
End Function
```

---

## Organizing modules

- Baseline folders: Modules/, Forms/, Classes/
- Keep utilities in a separate module (e.g., modUtils)
- One responsibility per module where possible

Recommended baseline modules
- `modUtils`: paths, OS detection, dialogs, logging
- `modPerf`: performance toggles wrapper
- `modExport`: SaveAs/Export wrappers

---

## Sub vs Function

```vb
Function Add(a As Double, b As Double) As Double
    Add = a + b
End Function

Sub UseAdd()
    Range("A1").Value = Add(2, 3)
End Sub
```

- Function returns a value; Sub performs actions

Also useful: Optional parameters and ByRef/ByVal

```vb
Sub ResizeCol(ByVal col As Long, Optional width As Double = 12#)
    Worksheets(1).Columns(col).ColumnWidth = width
End Sub
```

---

## Public vs Private scope

```vb
Public Const AppName As String = "MyTools"
Private Sub Helper()
End Sub
```

- Limit visibility to avoid name collisions

---

## Error handling patterns

```vb
Sub DoWork()
On Error GoTo Fail
    ' ...
    Exit Sub
Fail:
    MsgBox "Error: " & Err.Number & " - " & Err.Description
End Sub
```

- Add logging to a hidden sheet for audits

```vb
Sub LogError(context As String)
    On Error Resume Next
    With ThisWorkbook.Worksheets("Log")
        .Cells(.Rows.Count, 1).End(xlUp).Offset(1).Resize(1, 2).Value = Array(Now, context)
    End With
End Sub
```

---

## Loop patterns

- For i = 1 To n
- For Each cell In Range(...)
- Do While condition

Prefer For Each for collections (fewer index mistakes)

Batching: prefer reading/writing arrays

```vb
Dim arr, rng As Range
Set rng = Range("A1:D1000")
arr = rng.Value ' 2D variant array
' process arr in memory
rng.Value = arr
```

---

## Working with Sheets and Workbooks

```vb
Dim wb As Workbook
Set wb = Workbooks.Open("C:\\path\\file.xlsx")
wb.Sheets("Data").Range("A1").Value = Now
```

- Always Set object variables; remember to Close when done

---

## Performance tips

```vb
Application.ScreenUpdating = False
Application.Calculation = xlCalculationManual
' ... work ...
Application.Calculation = xlCalculationAutomatic
Application.ScreenUpdating = True
```

- Batch writes; avoid cell‑by‑cell loops when possible

Wrapper for safety and readability

```vb
Public Sub WithPerformance(ByVal taskName As String, ByVal work As String)
    Dim prevCalc As XlCalculation
    prevCalc = Application.Calculation
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
    On Error GoTo Clean
    Application.Run work ' call a Sub by name
Clean:
    Application.Calculation = prevCalc
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    If Err.Number <> 0 Then LogError taskName & ": " & Err.Number & " " & Err.Description
End Sub
```

---

## Input/Output basics

- InputBox, MsgBox, file read/write
- CSV vs XLSX vs XLSB tradeoffs

Trusted Locations tip (Windows)
- File → Options → Trust Center → Trust Center Settings → Trusted Locations → add your course folder to reduce prompts

---

## Example: Summarize a column

```vb
Function SumCol(rng As Range) As Double
    Dim c As Range, s As Double
    For Each c In rng
        If IsNumeric(c.Value) Then s = s + c.Value
    Next c
    SumCol = s
End Function
```

Refactor idea: use WorksheetFunction

```vb
Function SumColFast(rng As Range) As Double
    SumColFast = Application.WorksheetFunction.Sum(rng)
End Function
```

---

## Assigning macros to shapes

- Insert → Shapes → Right‑click → Assign Macro
- Great for dashboard buttons

---

## Custom toolbar on Mac/Win

- Create a quick access button for common macros
- Improves discoverability for non‑technical users

---

## Exercise: cleanup report

- Open a messy sheet; record cleanup
- Refactor to parameterize sheet/ranges
- Add error handling and performance guards

---

## Exercise: cross‑platform save

- Write a macro that saves a CSV differently on Win vs Mac
- Test with a configurable base path

---

## Macro security recap

- Prefer signed macros for distribution
- Educate users about enabling content

---

## Personal Macro Workbook tips

- Store reusable utilities (date stamp, clear filters)
- Backup PERSONAL.XLSB occasionally

---

## Ribbon/Toolbar customization

- Add buttons for frequent macros
- Improves adoption for teams

---

## Logging pattern

```vb
Sub LogMsg(msg As String)
    With Worksheets("Log")
        .Cells(.Rows.Count, 1).End(xlUp).Offset(1, 0).Value = Now & ": " & msg
    End With
End Sub
```

---

## Config via hidden sheet

- Store base paths, sheet names, parameters
- Read once at startup; validate

```vb
Public Function GetCfg(key As String) As String
    Dim m As Range
    Set m = Worksheets("Config").Range("A:B").Find(What:=key, LookAt:=xlWhole)
    If Not m Is Nothing Then GetCfg = m.Offset(0, 1).Value
End Function
```

---

## Case study: cross‑platform export

- Requirement: Export active sheet as CSV to Desktop
- Design: path helper + SaveAs wrapper + logging
